// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as resultstoredownloadModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v2.ResultStoreDownloadClient', () => {
    it('has servicePath', () => {
        const servicePath = resultstoredownloadModule.v2.ResultStoreDownloadClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = resultstoredownloadModule.v2.ResultStoreDownloadClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = resultstoredownloadModule.v2.ResultStoreDownloadClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.resultStoreDownloadStub, undefined);
        await client.initialize();
        assert(client.resultStoreDownloadStub);
    });

    it('has close method', () => {
        const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getInvocation', () => {
        it('invokes getInvocation without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.getInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.getInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInvocation without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.getInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IInvocation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInvocation with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInvocation(request), expectedError);
            assert((client.innerApiCalls.getInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getInvocationDownloadMetadata', () => {
        it('invokes getInvocationDownloadMetadata without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationDownloadMetadataRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.DownloadMetadata());
            client.innerApiCalls.getInvocationDownloadMetadata = stubSimpleCall(expectedResponse);
            const [response] = await client.getInvocationDownloadMetadata(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInvocationDownloadMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInvocationDownloadMetadata without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationDownloadMetadataRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.DownloadMetadata());
            client.innerApiCalls.getInvocationDownloadMetadata = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInvocationDownloadMetadata(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IDownloadMetadata|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInvocationDownloadMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInvocationDownloadMetadata with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationDownloadMetadataRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInvocationDownloadMetadata = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInvocationDownloadMetadata(request), expectedError);
            assert((client.innerApiCalls.getInvocationDownloadMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getConfiguration', () => {
        it('invokes getConfiguration without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetConfigurationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration());
            client.innerApiCalls.getConfiguration = stubSimpleCall(expectedResponse);
            const [response] = await client.getConfiguration(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getConfiguration without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetConfigurationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration());
            client.innerApiCalls.getConfiguration = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getConfiguration(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguration|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getConfiguration with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetConfigurationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getConfiguration = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getConfiguration(request), expectedError);
            assert((client.innerApiCalls.getConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getTarget', () => {
        it('invokes getTarget without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.getTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.getTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getTarget without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.getTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.ITarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getTarget with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getTarget(request), expectedError);
            assert((client.innerApiCalls.getTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getConfiguredTarget', () => {
        it('invokes getConfiguredTarget without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetConfiguredTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.getConfiguredTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.getConfiguredTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getConfiguredTarget without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetConfiguredTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.getConfiguredTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getConfiguredTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguredTarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getConfiguredTarget with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetConfiguredTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getConfiguredTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getConfiguredTarget(request), expectedError);
            assert((client.innerApiCalls.getConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getAction', () => {
        it('invokes getAction without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetActionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.getAction = stubSimpleCall(expectedResponse);
            const [response] = await client.getAction(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAction without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetActionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.getAction = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAction(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IAction|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getAction with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetActionRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getAction = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAction(request), expectedError);
            assert((client.innerApiCalls.getAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getFileSet', () => {
        it('invokes getFileSet without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetFileSetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.getFileSet = stubSimpleCall(expectedResponse);
            const [response] = await client.getFileSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getFileSet without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetFileSetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.getFileSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getFileSet(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFileSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getFileSet with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetFileSetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getFileSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getFileSet(request), expectedError);
            assert((client.innerApiCalls.getFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('searchInvocations', () => {
        it('invokes searchInvocations without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
            ];
            client.innerApiCalls.searchInvocations = stubSimpleCall(expectedResponse);
            const [response] = await client.searchInvocations(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.searchInvocations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes searchInvocations without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
            ];
            client.innerApiCalls.searchInvocations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.searchInvocations(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IInvocation[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.searchInvocations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes searchInvocations with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.searchInvocations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.searchInvocations(request), expectedError);
            assert((client.innerApiCalls.searchInvocations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes searchInvocationsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
            ];
            client.descriptors.page.searchInvocations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.searchInvocationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Invocation[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Invocation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.searchInvocations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.searchInvocations, request));
        });

        it('invokes searchInvocationsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.searchInvocations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.searchInvocationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Invocation[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Invocation) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.searchInvocations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.searchInvocations, request));
        });

        it('uses async iteration with searchInvocations without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation()),
            ];
            client.descriptors.page.searchInvocations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.IInvocation[] = [];
            const iterable = client.searchInvocationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.searchInvocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with searchInvocations with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.SearchInvocationsRequest());const expectedError = new Error('expected');
            client.descriptors.page.searchInvocations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.searchInvocationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.IInvocation[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.searchInvocations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listConfigurations', () => {
        it('invokes listConfigurations without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
            ];
            client.innerApiCalls.listConfigurations = stubSimpleCall(expectedResponse);
            const [response] = await client.listConfigurations(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listConfigurations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listConfigurations without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
            ];
            client.innerApiCalls.listConfigurations = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listConfigurations(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguration[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listConfigurations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listConfigurations with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listConfigurations = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listConfigurations(request), expectedError);
            assert((client.innerApiCalls.listConfigurations as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listConfigurationsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
            ];
            client.descriptors.page.listConfigurations.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listConfigurationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Configuration[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Configuration) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listConfigurations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listConfigurations, request));
            assert.strictEqual(
                (client.descriptors.page.listConfigurations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listConfigurationsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listConfigurations.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listConfigurationsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Configuration[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Configuration) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listConfigurations.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listConfigurations, request));
            assert.strictEqual(
                (client.descriptors.page.listConfigurations.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listConfigurations without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration()),
            ];
            client.descriptors.page.listConfigurations.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.IConfiguration[] = [];
            const iterable = client.listConfigurationsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listConfigurations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listConfigurations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listConfigurations with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfigurationsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listConfigurations.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listConfigurationsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.IConfiguration[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listConfigurations.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listConfigurations.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listTargets', () => {
        it('invokes listTargets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
            ];
            client.innerApiCalls.listTargets = stubSimpleCall(expectedResponse);
            const [response] = await client.listTargets(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTargets without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
            ];
            client.innerApiCalls.listTargets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listTargets(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.ITarget[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listTargets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listTargets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listTargets(request), expectedError);
            assert((client.innerApiCalls.listTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listTargetsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
            ];
            client.descriptors.page.listTargets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listTargetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Target[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Target) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listTargets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTargets, request));
            assert.strictEqual(
                (client.descriptors.page.listTargets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listTargetsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listTargets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listTargetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Target[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Target) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listTargets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listTargets, request));
            assert.strictEqual(
                (client.descriptors.page.listTargets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTargets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Target()),
            ];
            client.descriptors.page.listTargets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.ITarget[] = [];
            const iterable = client.listTargetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listTargets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listTargets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listTargetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.ITarget[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listTargets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listConfiguredTargets', () => {
        it('invokes listConfiguredTargets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
            ];
            client.innerApiCalls.listConfiguredTargets = stubSimpleCall(expectedResponse);
            const [response] = await client.listConfiguredTargets(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listConfiguredTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listConfiguredTargets without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
            ];
            client.innerApiCalls.listConfiguredTargets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listConfiguredTargets(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguredTarget[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listConfiguredTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listConfiguredTargets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listConfiguredTargets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listConfiguredTargets(request), expectedError);
            assert((client.innerApiCalls.listConfiguredTargets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listConfiguredTargetsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
            ];
            client.descriptors.page.listConfiguredTargets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listConfiguredTargetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.ConfiguredTarget[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.ConfiguredTarget) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listConfiguredTargets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listConfiguredTargets, request));
            assert.strictEqual(
                (client.descriptors.page.listConfiguredTargets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listConfiguredTargetsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listConfiguredTargets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listConfiguredTargetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.ConfiguredTarget[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.ConfiguredTarget) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listConfiguredTargets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listConfiguredTargets, request));
            assert.strictEqual(
                (client.descriptors.page.listConfiguredTargets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listConfiguredTargets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget()),
            ];
            client.descriptors.page.listConfiguredTargets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.IConfiguredTarget[] = [];
            const iterable = client.listConfiguredTargetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listConfiguredTargets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listConfiguredTargets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listConfiguredTargets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListConfiguredTargetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listConfiguredTargets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listConfiguredTargetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.IConfiguredTarget[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listConfiguredTargets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listConfiguredTargets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listActions', () => {
        it('invokes listActions without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
            ];
            client.innerApiCalls.listActions = stubSimpleCall(expectedResponse);
            const [response] = await client.listActions(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listActions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listActions without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
            ];
            client.innerApiCalls.listActions = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listActions(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IAction[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listActions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listActions with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listActions = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listActions(request), expectedError);
            assert((client.innerApiCalls.listActions as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listActionsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
            ];
            client.descriptors.page.listActions.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listActionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Action[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Action) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listActions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listActions, request));
            assert.strictEqual(
                (client.descriptors.page.listActions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listActionsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listActions.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listActionsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.Action[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.Action) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listActions.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listActions, request));
            assert.strictEqual(
                (client.descriptors.page.listActions.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listActions without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.Action()),
            ];
            client.descriptors.page.listActions.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.IAction[] = [];
            const iterable = client.listActionsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listActions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listActions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listActions with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListActionsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listActions.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listActionsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.IAction[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listActions.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listActions.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listFileSets', () => {
        it('invokes listFileSets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.innerApiCalls.listFileSets = stubSimpleCall(expectedResponse);
            const [response] = await client.listFileSets(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listFileSets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listFileSets without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.innerApiCalls.listFileSets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listFileSets(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFileSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listFileSets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listFileSets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listFileSets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listFileSets(request), expectedError);
            assert((client.innerApiCalls.listFileSets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listFileSetsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.descriptors.page.listFileSets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listFileSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.FileSet[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.FileSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listFileSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFileSets, request));
            assert.strictEqual(
                (client.descriptors.page.listFileSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listFileSetsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listFileSets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listFileSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.FileSet[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.FileSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listFileSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFileSets, request));
            assert.strictEqual(
                (client.descriptors.page.listFileSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listFileSets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.descriptors.page.listFileSets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.IFileSet[] = [];
            const iterable = client.listFileSetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listFileSets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.ListFileSetsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listFileSets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listFileSetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.IFileSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('traverseFileSets', () => {
        it('invokes traverseFileSets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.innerApiCalls.traverseFileSets = stubSimpleCall(expectedResponse);
            const [response] = await client.traverseFileSets(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.traverseFileSets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes traverseFileSets without error using callback', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.innerApiCalls.traverseFileSets = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.traverseFileSets(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFileSet[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.traverseFileSets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes traverseFileSets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.traverseFileSets = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.traverseFileSets(request), expectedError);
            assert((client.innerApiCalls.traverseFileSets as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes traverseFileSetsStream without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.descriptors.page.traverseFileSets.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.traverseFileSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.FileSet[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.FileSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.traverseFileSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.traverseFileSets, request));
            assert.strictEqual(
                (client.descriptors.page.traverseFileSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes traverseFileSetsStream with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedError = new Error('expected');
            client.descriptors.page.traverseFileSets.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.traverseFileSetsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.devtools.resultstore.v2.FileSet[] = [];
                stream.on('data', (response: protos.google.devtools.resultstore.v2.FileSet) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.traverseFileSets.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.traverseFileSets, request));
            assert.strictEqual(
                (client.descriptors.page.traverseFileSets.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with traverseFileSets without error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedResponse = [
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
              generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet()),
            ];
            client.descriptors.page.traverseFileSets.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.devtools.resultstore.v2.IFileSet[] = [];
            const iterable = client.traverseFileSetsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.traverseFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.traverseFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with traverseFileSets with error', async () => {
            const client = new resultstoredownloadModule.v2.ResultStoreDownloadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TraverseFileSetsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";const expectedError = new Error('expected');
            client.descriptors.page.traverseFileSets.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.traverseFileSetsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.devtools.resultstore.v2.IFileSet[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.traverseFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.traverseFileSets.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });
});
