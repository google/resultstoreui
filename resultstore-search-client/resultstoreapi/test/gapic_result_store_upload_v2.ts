// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as resultstoreuploadModule from '../src';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

describe('v2.ResultStoreUploadClient', () => {
    it('has servicePath', () => {
        const servicePath = resultstoreuploadModule.v2.ResultStoreUploadClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = resultstoreuploadModule.v2.ResultStoreUploadClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = resultstoreuploadModule.v2.ResultStoreUploadClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new resultstoreuploadModule.v2.ResultStoreUploadClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.resultStoreUploadStub, undefined);
        await client.initialize();
        assert(client.resultStoreUploadStub);
    });

    it('has close method', () => {
        const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('createInvocation', () => {
        it('invokes createInvocation without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateInvocationRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.createInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.createInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createInvocation without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateInvocationRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.createInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IInvocation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createInvocation with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateInvocationRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createInvocation(request), expectedError);
            assert((client.innerApiCalls.createInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateInvocation', () => {
        it('invokes updateInvocation without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateInvocationRequest());
            request.invocation = {};
            request.invocation.name = '';
            const expectedHeaderRequestParams = "invocation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.updateInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.updateInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateInvocation without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateInvocationRequest());
            request.invocation = {};
            request.invocation.name = '';
            const expectedHeaderRequestParams = "invocation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.updateInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IInvocation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateInvocation with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateInvocationRequest());
            request.invocation = {};
            request.invocation.name = '';
            const expectedHeaderRequestParams = "invocation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateInvocation(request), expectedError);
            assert((client.innerApiCalls.updateInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('mergeInvocation', () => {
        it('invokes mergeInvocation without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeInvocationRequest());
            request.invocation = {};
            request.invocation.name = '';
            const expectedHeaderRequestParams = "invocation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.mergeInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.mergeInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes mergeInvocation without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeInvocationRequest());
            request.invocation = {};
            request.invocation.name = '';
            const expectedHeaderRequestParams = "invocation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Invocation());
            client.innerApiCalls.mergeInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mergeInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IInvocation|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes mergeInvocation with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeInvocationRequest());
            request.invocation = {};
            request.invocation.name = '';
            const expectedHeaderRequestParams = "invocation.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.mergeInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mergeInvocation(request), expectedError);
            assert((client.innerApiCalls.mergeInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('touchInvocation', () => {
        it('invokes touchInvocation without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TouchInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.TouchInvocationResponse());
            client.innerApiCalls.touchInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.touchInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.touchInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes touchInvocation without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TouchInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.TouchInvocationResponse());
            client.innerApiCalls.touchInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.touchInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.ITouchInvocationResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.touchInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes touchInvocation with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.TouchInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.touchInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.touchInvocation(request), expectedError);
            assert((client.innerApiCalls.touchInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('finalizeInvocation', () => {
        it('invokes finalizeInvocation without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeInvocationResponse());
            client.innerApiCalls.finalizeInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.finalizeInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.finalizeInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes finalizeInvocation without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeInvocationResponse());
            client.innerApiCalls.finalizeInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.finalizeInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.finalizeInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes finalizeInvocation with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.finalizeInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.finalizeInvocation(request), expectedError);
            assert((client.innerApiCalls.finalizeInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteInvocation', () => {
        it('invokes deleteInvocation without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.DeleteInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteInvocation = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteInvocation(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteInvocation without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.DeleteInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteInvocation = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteInvocation(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteInvocation with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.DeleteInvocationRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteInvocation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteInvocation(request), expectedError);
            assert((client.innerApiCalls.deleteInvocation as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createTarget', () => {
        it('invokes createTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.createTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.createTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.createTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.ITarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createTarget(request), expectedError);
            assert((client.innerApiCalls.createTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateTarget', () => {
        it('invokes updateTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.updateTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.updateTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.updateTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.ITarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateTarget(request), expectedError);
            assert((client.innerApiCalls.updateTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('mergeTarget', () => {
        it('invokes mergeTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.mergeTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.mergeTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes mergeTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Target());
            client.innerApiCalls.mergeTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mergeTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.ITarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes mergeTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeTargetRequest());
            request.target = {};
            request.target.name = '';
            const expectedHeaderRequestParams = "target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.mergeTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mergeTarget(request), expectedError);
            assert((client.innerApiCalls.mergeTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('finalizeTarget', () => {
        it('invokes finalizeTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeTargetResponse());
            client.innerApiCalls.finalizeTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.finalizeTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.finalizeTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes finalizeTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeTargetResponse());
            client.innerApiCalls.finalizeTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.finalizeTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFinalizeTargetResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.finalizeTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes finalizeTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.finalizeTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.finalizeTarget(request), expectedError);
            assert((client.innerApiCalls.finalizeTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createConfiguredTarget', () => {
        it('invokes createConfiguredTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateConfiguredTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.createConfiguredTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.createConfiguredTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createConfiguredTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateConfiguredTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.createConfiguredTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createConfiguredTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguredTarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createConfiguredTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateConfiguredTargetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createConfiguredTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createConfiguredTarget(request), expectedError);
            assert((client.innerApiCalls.createConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateConfiguredTarget', () => {
        it('invokes updateConfiguredTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateConfiguredTargetRequest());
            request.configuredTarget = {};
            request.configuredTarget.name = '';
            const expectedHeaderRequestParams = "configured_target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.updateConfiguredTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.updateConfiguredTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateConfiguredTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateConfiguredTargetRequest());
            request.configuredTarget = {};
            request.configuredTarget.name = '';
            const expectedHeaderRequestParams = "configured_target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.updateConfiguredTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateConfiguredTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguredTarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateConfiguredTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateConfiguredTargetRequest());
            request.configuredTarget = {};
            request.configuredTarget.name = '';
            const expectedHeaderRequestParams = "configured_target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateConfiguredTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateConfiguredTarget(request), expectedError);
            assert((client.innerApiCalls.updateConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('mergeConfiguredTarget', () => {
        it('invokes mergeConfiguredTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeConfiguredTargetRequest());
            request.configuredTarget = {};
            request.configuredTarget.name = '';
            const expectedHeaderRequestParams = "configured_target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.mergeConfiguredTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.mergeConfiguredTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes mergeConfiguredTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeConfiguredTargetRequest());
            request.configuredTarget = {};
            request.configuredTarget.name = '';
            const expectedHeaderRequestParams = "configured_target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.ConfiguredTarget());
            client.innerApiCalls.mergeConfiguredTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mergeConfiguredTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguredTarget|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes mergeConfiguredTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeConfiguredTargetRequest());
            request.configuredTarget = {};
            request.configuredTarget.name = '';
            const expectedHeaderRequestParams = "configured_target.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.mergeConfiguredTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mergeConfiguredTarget(request), expectedError);
            assert((client.innerApiCalls.mergeConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('finalizeConfiguredTarget', () => {
        it('invokes finalizeConfiguredTarget without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeConfiguredTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeConfiguredTargetResponse());
            client.innerApiCalls.finalizeConfiguredTarget = stubSimpleCall(expectedResponse);
            const [response] = await client.finalizeConfiguredTarget(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.finalizeConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes finalizeConfiguredTarget without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeConfiguredTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeConfiguredTargetResponse());
            client.innerApiCalls.finalizeConfiguredTarget = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.finalizeConfiguredTarget(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.finalizeConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes finalizeConfiguredTarget with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.FinalizeConfiguredTargetRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.finalizeConfiguredTarget = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.finalizeConfiguredTarget(request), expectedError);
            assert((client.innerApiCalls.finalizeConfiguredTarget as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createAction', () => {
        it('invokes createAction without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateActionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.createAction = stubSimpleCall(expectedResponse);
            const [response] = await client.createAction(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createAction without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateActionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.createAction = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAction(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IAction|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createAction with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateActionRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createAction = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createAction(request), expectedError);
            assert((client.innerApiCalls.createAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateAction', () => {
        it('invokes updateAction without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateActionRequest());
            request.action = {};
            request.action.name = '';
            const expectedHeaderRequestParams = "action.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.updateAction = stubSimpleCall(expectedResponse);
            const [response] = await client.updateAction(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAction without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateActionRequest());
            request.action = {};
            request.action.name = '';
            const expectedHeaderRequestParams = "action.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.updateAction = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAction(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IAction|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateAction with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateActionRequest());
            request.action = {};
            request.action.name = '';
            const expectedHeaderRequestParams = "action.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAction = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateAction(request), expectedError);
            assert((client.innerApiCalls.updateAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('mergeAction', () => {
        it('invokes mergeAction without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeActionRequest());
            request.action = {};
            request.action.name = '';
            const expectedHeaderRequestParams = "action.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.mergeAction = stubSimpleCall(expectedResponse);
            const [response] = await client.mergeAction(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes mergeAction without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeActionRequest());
            request.action = {};
            request.action.name = '';
            const expectedHeaderRequestParams = "action.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Action());
            client.innerApiCalls.mergeAction = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mergeAction(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IAction|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes mergeAction with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeActionRequest());
            request.action = {};
            request.action.name = '';
            const expectedHeaderRequestParams = "action.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.mergeAction = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mergeAction(request), expectedError);
            assert((client.innerApiCalls.mergeAction as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createConfiguration', () => {
        it('invokes createConfiguration without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateConfigurationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration());
            client.innerApiCalls.createConfiguration = stubSimpleCall(expectedResponse);
            const [response] = await client.createConfiguration(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createConfiguration without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateConfigurationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration());
            client.innerApiCalls.createConfiguration = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createConfiguration(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguration|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createConfiguration with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateConfigurationRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createConfiguration = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createConfiguration(request), expectedError);
            assert((client.innerApiCalls.createConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateConfiguration', () => {
        it('invokes updateConfiguration without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateConfigurationRequest());
            request.configuration = {};
            request.configuration.name = '';
            const expectedHeaderRequestParams = "configuration.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration());
            client.innerApiCalls.updateConfiguration = stubSimpleCall(expectedResponse);
            const [response] = await client.updateConfiguration(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateConfiguration without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateConfigurationRequest());
            request.configuration = {};
            request.configuration.name = '';
            const expectedHeaderRequestParams = "configuration.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.Configuration());
            client.innerApiCalls.updateConfiguration = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateConfiguration(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IConfiguration|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateConfiguration with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateConfigurationRequest());
            request.configuration = {};
            request.configuration.name = '';
            const expectedHeaderRequestParams = "configuration.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateConfiguration = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateConfiguration(request), expectedError);
            assert((client.innerApiCalls.updateConfiguration as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createFileSet', () => {
        it('invokes createFileSet without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateFileSetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.createFileSet = stubSimpleCall(expectedResponse);
            const [response] = await client.createFileSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createFileSet without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateFileSetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.createFileSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createFileSet(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFileSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createFileSet with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.CreateFileSetRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createFileSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createFileSet(request), expectedError);
            assert((client.innerApiCalls.createFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateFileSet', () => {
        it('invokes updateFileSet without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateFileSetRequest());
            request.fileSet = {};
            request.fileSet.name = '';
            const expectedHeaderRequestParams = "file_set.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.updateFileSet = stubSimpleCall(expectedResponse);
            const [response] = await client.updateFileSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateFileSet without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateFileSetRequest());
            request.fileSet = {};
            request.fileSet.name = '';
            const expectedHeaderRequestParams = "file_set.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.updateFileSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateFileSet(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFileSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateFileSet with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UpdateFileSetRequest());
            request.fileSet = {};
            request.fileSet.name = '';
            const expectedHeaderRequestParams = "file_set.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateFileSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateFileSet(request), expectedError);
            assert((client.innerApiCalls.updateFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('mergeFileSet', () => {
        it('invokes mergeFileSet without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeFileSetRequest());
            request.fileSet = {};
            request.fileSet.name = '';
            const expectedHeaderRequestParams = "file_set.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.mergeFileSet = stubSimpleCall(expectedResponse);
            const [response] = await client.mergeFileSet(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes mergeFileSet without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeFileSetRequest());
            request.fileSet = {};
            request.fileSet.name = '';
            const expectedHeaderRequestParams = "file_set.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.FileSet());
            client.innerApiCalls.mergeFileSet = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.mergeFileSet(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IFileSet|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.mergeFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes mergeFileSet with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.MergeFileSetRequest());
            request.fileSet = {};
            request.fileSet.name = '';
            const expectedHeaderRequestParams = "file_set.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.mergeFileSet = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.mergeFileSet(request), expectedError);
            assert((client.innerApiCalls.mergeFileSet as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('uploadBatch', () => {
        it('invokes uploadBatch without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadBatchRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadBatchResponse());
            client.innerApiCalls.uploadBatch = stubSimpleCall(expectedResponse);
            const [response] = await client.uploadBatch(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.uploadBatch as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes uploadBatch without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadBatchRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadBatchResponse());
            client.innerApiCalls.uploadBatch = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.uploadBatch(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IUploadBatchResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.uploadBatch as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes uploadBatch with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadBatchRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.uploadBatch = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.uploadBatch(request), expectedError);
            assert((client.innerApiCalls.uploadBatch as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getInvocationUploadMetadata', () => {
        it('invokes getInvocationUploadMetadata without error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationUploadMetadataRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadMetadata());
            client.innerApiCalls.getInvocationUploadMetadata = stubSimpleCall(expectedResponse);
            const [response] = await client.getInvocationUploadMetadata(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInvocationUploadMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getInvocationUploadMetadata without error using callback', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationUploadMetadataRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.devtools.resultstore.v2.UploadMetadata());
            client.innerApiCalls.getInvocationUploadMetadata = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getInvocationUploadMetadata(
                    request,
                    (err?: Error|null, result?: protos.google.devtools.resultstore.v2.IUploadMetadata|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getInvocationUploadMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getInvocationUploadMetadata with error', async () => {
            const client = new resultstoreuploadModule.v2.ResultStoreUploadClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.devtools.resultstore.v2.GetInvocationUploadMetadataRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getInvocationUploadMetadata = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getInvocationUploadMetadata(request), expectedError);
            assert((client.innerApiCalls.getInvocationUploadMetadata as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });
});
