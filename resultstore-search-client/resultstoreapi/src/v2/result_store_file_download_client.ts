// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';
import * as path from 'path';

import * as protos from '../../protos/protos';
import * as gapicConfig from './result_store_file_download_client_config.json';

const version = require('../../../package.json').version;

/**
 *  This API allows download of File messages referenced in
 *  ResultStore resources.
 * @class
 * @memberof v2
 */
export class ResultStoreFileDownloadClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}, batching: {}};
  innerApiCalls: {[name: string]: Function};
  resultStoreFileDownloadStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ResultStoreFileDownloadClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof ResultStoreFileDownloadClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof ResultStoreFileDownloadClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this.descriptors.stream = {
      getFile: new this._gaxModule.StreamDescriptor(gax.StreamType.SERVER_STREAMING)
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.devtools.resultstore.v2.ResultStoreFileDownload', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.resultStoreFileDownloadStub) {
      return this.resultStoreFileDownloadStub;
    }

    // Put together the "service stub" for
    // google.devtools.resultstore.v2.ResultStoreFileDownload.
    this.resultStoreFileDownloadStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.devtools.resultstore.v2.ResultStoreFileDownload') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.resultstore.v2.ResultStoreFileDownload,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const resultStoreFileDownloadStubMethods =
        ['getFile', 'getFileTail'];
    for (const methodName of resultStoreFileDownloadStubMethods) {
      const callPromise = this.resultStoreFileDownloadStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
            this.descriptors.stream[methodName] ||
            this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.resultStoreFileDownloadStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'resultstore.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'resultstore.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getFileTail(
      request: protos.google.devtools.resultstore.v2.IGetFileTailRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IGetFileTailResponse,
        protos.google.devtools.resultstore.v2.IGetFileTailRequest|undefined, {}|undefined
      ]>;
  getFileTail(
      request: protos.google.devtools.resultstore.v2.IGetFileTailRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IGetFileTailResponse,
          protos.google.devtools.resultstore.v2.IGetFileTailRequest|null|undefined,
          {}|null|undefined>): void;
  getFileTail(
      request: protos.google.devtools.resultstore.v2.IGetFileTailRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IGetFileTailResponse,
          protos.google.devtools.resultstore.v2.IGetFileTailRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the tail of a File with the given uri.
 *
 * An error will be reported in the following cases:
 * - If the File is not found.
 * - If the given File uri is badly formatted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.uri
 *   This corresponds to the uri field in the File message.
 * @param {number} request.readOffset
 *   The offset for the first byte to return in the read, relative to the end
 *   of the resource.
 *
 *   A `read_offset` that is negative or greater than the size of the resource
 *   will cause an `OUT_OF_RANGE` error.
 * @param {number} request.readLimit
 *   The maximum number of `data` bytes the server is allowed to return. The
 *   server will return bytes starting from the tail of the file.
 *
 *   A `read_limit` of zero indicates that there is no limit, and a negative
 *   `read_limit` will cause an error.
 * @param {string} request.archiveEntry
 *   Only applies if the referenced file is a known archive type (ar, jar, zip)
 *   The above read_offset and read_limit fields are applied to this entry.
 *   If this file is not an archive, INVALID_ARGUMENT is thrown.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GetFileTailResponse]{@link google.devtools.resultstore.v2.GetFileTailResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getFileTail(
      request: protos.google.devtools.resultstore.v2.IGetFileTailRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IGetFileTailResponse,
          protos.google.devtools.resultstore.v2.IGetFileTailRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IGetFileTailResponse,
          protos.google.devtools.resultstore.v2.IGetFileTailRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IGetFileTailResponse,
        protos.google.devtools.resultstore.v2.IGetFileTailRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'uri': request.uri || '',
    });
    this.initialize();
    return this.innerApiCalls.getFileTail(request, options, callback);
  }

/**
 * Retrieves the File with the given uri.
 * returns a stream of bytes to be stitched together in order.
 *
 * An error will be reported in the following cases:
 * - If the File is not found.
 * - If the given File uri is badly formatted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.uri
 *   This corresponds to the uri field in the File message.
 * @param {number} request.readOffset
 *   The offset for the first byte to return in the read, relative to the start
 *   of the resource.
 *
 *   A `read_offset` that is negative or greater than the size of the resource
 *   will cause an `OUT_OF_RANGE` error.
 * @param {number} request.readLimit
 *   The maximum number of `data` bytes the server is allowed to return in the
 *   sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
 *   there is no limit, and a negative `read_limit` will cause an error.
 *
 *   If the stream returns fewer bytes than allowed by the `read_limit` and no
 *   error occurred, the stream includes all data from the `read_offset` to the
 *   end of the resource.
 * @param {string} request.archiveEntry
 *   Only applies if the referenced file is a known archive type (ar, jar, zip)
 *   The above read_offset and read_limit fields are applied to this entry.
 *   If this file is not an archive, INVALID_ARGUMENT is thrown.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits [GetFileResponse]{@link google.devtools.resultstore.v2.GetFileResponse} on 'data' event.
 */
  getFile(
      request?: protos.google.devtools.resultstore.v2.IGetFileRequest,
      options?: gax.CallOptions):
    gax.CancellableStream{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'uri': request.uri || '',
    });
    this.initialize();
    return this.innerApiCalls.getFile(request, options);
  }


  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.resultStoreFileDownloadStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
