// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions} from 'google-gax';
import * as path from 'path';

import * as protos from '../../protos/protos';
import * as gapicConfig from './result_store_upload_client_config.json';

const version = require('../../../package.json').version;

/**
 *  This is the interface used to upload information to the ResultStore database,
 *  to update that information as necessary, and to make it immutable at the end.
 *
 *  This interface intentionally does not support user read-modify-write
 *  operations. They may corrupt data, and are too expensive. For the same
 *  reason, all upload RPCs will return no resource fields except name and ID. An
 *  uploader should hold as little state as possible in memory to avoid running
 *  out of memory.
 * @class
 * @memberof v2
 */
export class ResultStoreUploadClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}, batching: {}};
  innerApiCalls: {[name: string]: Function};
  resultStoreUploadStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ResultStoreUploadClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof ResultStoreUploadClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof ResultStoreUploadClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.devtools.resultstore.v2.ResultStoreUpload', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.resultStoreUploadStub) {
      return this.resultStoreUploadStub;
    }

    // Put together the "service stub" for
    // google.devtools.resultstore.v2.ResultStoreUpload.
    this.resultStoreUploadStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.devtools.resultstore.v2.ResultStoreUpload') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.resultstore.v2.ResultStoreUpload,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const resultStoreUploadStubMethods =
        ['createInvocation', 'updateInvocation', 'mergeInvocation', 'touchInvocation', 'finalizeInvocation', 'deleteInvocation', 'createTarget', 'updateTarget', 'mergeTarget', 'finalizeTarget', 'createConfiguredTarget', 'updateConfiguredTarget', 'mergeConfiguredTarget', 'finalizeConfiguredTarget', 'createAction', 'updateAction', 'mergeAction', 'createConfiguration', 'updateConfiguration', 'createFileSet', 'updateFileSet', 'mergeFileSet', 'uploadBatch', 'getInvocationUploadMetadata'];
    for (const methodName of resultStoreUploadStubMethods) {
      const callPromise = this.resultStoreUploadStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
            this.descriptors.stream[methodName] ||
            this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.resultStoreUploadStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'resultstore.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'resultstore.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createInvocation(
      request: protos.google.devtools.resultstore.v2.ICreateInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.ICreateInvocationRequest|undefined, {}|undefined
      ]>;
  createInvocation(
      request: protos.google.devtools.resultstore.v2.ICreateInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.ICreateInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  createInvocation(
      request: protos.google.devtools.resultstore.v2.ICreateInvocationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.ICreateInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates the given invocation.
 *
 * This is not an implicitly idempotent API, so a request id is required to
 * make it idempotent.
 *
 * Returns an empty Invocation proto with only the name and ID fields
 * populated.
 *
 * An error will be reported in the following cases:
 * - If an invocation with the same ID already exists.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID. If set, invocation_id must also be provided.
 *   Restricted to 36 Unicode characters.
 * @param {string} request.invocationId
 *   The invocation ID. It is optional, but strongly recommended.
 *
 *   If left empty then a new unique ID will be assigned by the server. If
 *   populated, a RFC 4122-compliant v4 UUID is preferred, but v3 or v5 UUIDs
 *   are allowed too.
 * @param {google.devtools.resultstore.v2.Invocation} request.invocation
 *   The invocation to create.  Its name field will be ignored, since the name
 *   will be derived from the id field above and assigned by the server.
 * @param {string} request.authorizationToken
 *   This is a token to authorize upload access to this invocation. It must be
 *   set to a RFC 4122-compliant v3, v4, or v5 UUID. Once this is set in
 *   CreateInvocation, all other upload RPCs for that Invocation and any of its
 *   child resources must also include the exact same token, or they will be
 *   rejected. The generated token should be unique to this invocation, and it
 *   should be kept secret.
 *
 *   The purpose of this field is to prevent other users and tools from
 *   clobbering your upload intentionally or accidentally. The standard way of
 *   using this token is to create a second v4 UUID when the invocation_id is
 *   created, and storing them together during the upload. Essentially, this is
 *   a "password" to the invocation.
 * @param {google.protobuf.Timestamp} request.autoFinalizeTime
 *   By default, Invocations are auto-finalized if they are not modified for 24
 *   hours. If you need auto-finalize to happen sooner, set this field to the
 *   time you'd like auto-finalize to occur.
 * @param {string} request.initialResumeToken
 *   Client provided unique token for batch upload to ensure data integrity and
 *   to provide a way to resume batch upload in case of a distributed failure on
 *   the client side. The standard uploading client is presumed to have many
 *   machines uploading to ResultStore, and that any given machine could process
 *   any given Invocation at any time. This field is used to coordinate between
 *   the client's machines, resolve concurrency issues, and enforce "exactly
 *   once" semantics on each batch within the upload.
 *
 *   The typical usage of the resume_token is that it should contain a "key"
 *   indicating to the client where it is in the upload process, so that the
 *   client can use it to resume the upload by reconstructing the state of
 *   upload from the point where it was interrupted.
 *
 *   If this matches the previously uploaded resume_token, then this request
 *   will silently do nothing, making CreateInvocation idempotent.
 *   If this token is provided, all further upload RPCs must be done through
 *   UploadBatch. This token must not be combined with request_id.
 *   Must be web safe Base64 encoded bytes.
 * @param {Buffer} request.uploaderState
 *   Client-specific data used to resume batch upload if an error occurs and
 *   retry is needed. This serves a role closely related to resume_token, as
 *   both fields may be used to provide state required to restore a Batch
 *   Upload, but they differ in two important aspects:
 *    - it is not compared to previous values, and as such does not provide
 *      concurrency control;
 *    - it allows for a larger payload, since the contents are never
 *      inspected/compared;
 *   The size of the message must be within 1 MiB. Too large requests will be
 *   rejected.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Invocation]{@link google.devtools.resultstore.v2.Invocation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createInvocation(
      request: protos.google.devtools.resultstore.v2.ICreateInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.ICreateInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.ICreateInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.ICreateInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createInvocation(request, options, callback);
  }
  updateInvocation(
      request: protos.google.devtools.resultstore.v2.IUpdateInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.IUpdateInvocationRequest|undefined, {}|undefined
      ]>;
  updateInvocation(
      request: protos.google.devtools.resultstore.v2.IUpdateInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IUpdateInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  updateInvocation(
      request: protos.google.devtools.resultstore.v2.IUpdateInvocationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IUpdateInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a standard update to the invocation identified by the given proto's
 * name.  For all types of fields (primitive, message, or repeated), replaces
 * them with the given proto fields if they are under the given field mask
 * paths.  Fields that match the mask but aren't populated in the given
 * invocation are cleared. This is an implicitly idempotent API.
 *
 * Returns an empty Invocation proto with only the name and ID fields
 * populated.
 *
 * An error will be reported in the following cases:
 * - If the invocation does not exist.
 * - If the invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.resultstore.v2.Invocation} request.invocation
 *   Contains the name and the fields of the invocation to be updated.  The
 *   name format must be: invocations/${INVOCATION_ID}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to update.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Invocation]{@link google.devtools.resultstore.v2.Invocation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateInvocation(
      request: protos.google.devtools.resultstore.v2.IUpdateInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IUpdateInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IUpdateInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.IUpdateInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'invocation.name': request.invocation!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateInvocation(request, options, callback);
  }
  mergeInvocation(
      request: protos.google.devtools.resultstore.v2.IMergeInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.IMergeInvocationRequest|undefined, {}|undefined
      ]>;
  mergeInvocation(
      request: protos.google.devtools.resultstore.v2.IMergeInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IMergeInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  mergeInvocation(
      request: protos.google.devtools.resultstore.v2.IMergeInvocationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IMergeInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a merge update to the invocation identified by the given proto's
 * name.  For primitive and message fields, replaces them with the ones in
 * the given proto if they are covered under the field mask paths.  For
 * repeated fields, merges to them with the given ones if they are covered
 * under the field mask paths. This is not an implicitly idempotent API, so a
 * request id is required to make it idempotent.
 *
 * Returns an empty Invocation proto with only the name and ID fields
 * populated.
 *
 *
 * An error will be reported in the following cases:
 * - If the invocation does not exist.
 * - If the invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {google.devtools.resultstore.v2.Invocation} request.invocation
 *   Contains the name and the fields of the invocation to be merged.  The
 *   name format must be: invocations/${INVOCATION_ID}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to merge.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Invocation]{@link google.devtools.resultstore.v2.Invocation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  mergeInvocation(
      request: protos.google.devtools.resultstore.v2.IMergeInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IMergeInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IMergeInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.IMergeInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'invocation.name': request.invocation!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.mergeInvocation(request, options, callback);
  }
  touchInvocation(
      request: protos.google.devtools.resultstore.v2.ITouchInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.ITouchInvocationResponse,
        protos.google.devtools.resultstore.v2.ITouchInvocationRequest|undefined, {}|undefined
      ]>;
  touchInvocation(
      request: protos.google.devtools.resultstore.v2.ITouchInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITouchInvocationResponse,
          protos.google.devtools.resultstore.v2.ITouchInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  touchInvocation(
      request: protos.google.devtools.resultstore.v2.ITouchInvocationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITouchInvocationResponse,
          protos.google.devtools.resultstore.v2.ITouchInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Touches the invocation identified by the given proto's name.
 *
 * This is useful when you need to notify ResultStore that you haven't
 * abandoned the upload, since abandoned uploads will be automatically
 * finalized after a set period.
 *
 * An error will be reported in the following cases:
 * - If the invocation does not exist.
 * - If the invocation is finalized.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the invocation.  Its format must be:
 *   invocations/${INVOCATION_ID}
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [TouchInvocationResponse]{@link google.devtools.resultstore.v2.TouchInvocationResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  touchInvocation(
      request: protos.google.devtools.resultstore.v2.ITouchInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.ITouchInvocationResponse,
          protos.google.devtools.resultstore.v2.ITouchInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.ITouchInvocationResponse,
          protos.google.devtools.resultstore.v2.ITouchInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.ITouchInvocationResponse,
        protos.google.devtools.resultstore.v2.ITouchInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.touchInvocation(request, options, callback);
  }
  finalizeInvocation(
      request: protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse,
        protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest|undefined, {}|undefined
      ]>;
  finalizeInvocation(
      request: protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse,
          protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  finalizeInvocation(
      request: protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse,
          protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Declares the invocation with the given name as finalized and immutable by
 * the user. It may still be mutated by post-processing. This is an implicitly
 * idempotent API.
 *
 * If an Invocation is not updated for 24 hours, some time after that
 * this will be called automatically.
 *
 * An error will be reported in the following cases:
 * - If the invocation does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the invocation.  Its format must be:
 *   invocations/${INVOCATION_ID}
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FinalizeInvocationResponse]{@link google.devtools.resultstore.v2.FinalizeInvocationResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  finalizeInvocation(
      request: protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse,
          protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse,
          protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFinalizeInvocationResponse,
        protos.google.devtools.resultstore.v2.IFinalizeInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.finalizeInvocation(request, options, callback);
  }
  deleteInvocation(
      request: protos.google.devtools.resultstore.v2.IDeleteInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.devtools.resultstore.v2.IDeleteInvocationRequest|undefined, {}|undefined
      ]>;
  deleteInvocation(
      request: protos.google.devtools.resultstore.v2.IDeleteInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.resultstore.v2.IDeleteInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  deleteInvocation(
      request: protos.google.devtools.resultstore.v2.IDeleteInvocationRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.resultstore.v2.IDeleteInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes an immutable invocation (permanently)
 * Note: this does not delete indirect data, e.g. files stored in other
 * services.
 *
 * An error will be reported in the following cases:
 * - If the invocation does not exist.
 * - If the invocation is not finalized.  This can be retried until it is.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the invocation.  Its format must be:
 *   invocations/${INVOCATION_ID}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  deleteInvocation(
      request: protos.google.devtools.resultstore.v2.IDeleteInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.resultstore.v2.IDeleteInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.resultstore.v2.IDeleteInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.devtools.resultstore.v2.IDeleteInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteInvocation(request, options, callback);
  }
  createTarget(
      request: protos.google.devtools.resultstore.v2.ICreateTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.ICreateTargetRequest|undefined, {}|undefined
      ]>;
  createTarget(
      request: protos.google.devtools.resultstore.v2.ICreateTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.ICreateTargetRequest|null|undefined,
          {}|null|undefined>): void;
  createTarget(
      request: protos.google.devtools.resultstore.v2.ICreateTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.ICreateTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates the given target under the given parent invocation. The given
 * target ID is URL encoded, converted to the full resource name, and assigned
 * to the target's name field. This is not an implicitly idempotent API, so a
 * request id is required to make it idempotent.
 *
 * Returns an empty Target proto with only the name and ID fields populated.
 *
 * An error will be reported in the following cases:
 * - If no target ID is provided.
 * - If the parent invocation does not exist.
 * - If the parent invocation is finalized.
 * - If a target with the same name already exists.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {string} request.parent
 *   The name of the parent invocation in which the target is created.
 *   Its format must be invocations/${INVOCATION_ID}
 * @param {string} request.targetId
 *   The target identifier.  It can be any string up to 1024 Unicode characters
 *   long except for the reserved id '-'.
 * @param {google.devtools.resultstore.v2.Target} request.target
 *   The target to create.  Its name field will be ignored, since the name will
 *   be derived from the id field above and assigned by the server.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Target]{@link google.devtools.resultstore.v2.Target}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createTarget(
      request: protos.google.devtools.resultstore.v2.ICreateTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.ICreateTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.ICreateTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.ICreateTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createTarget(request, options, callback);
  }
  updateTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.IUpdateTargetRequest|undefined, {}|undefined
      ]>;
  updateTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IUpdateTargetRequest|null|undefined,
          {}|null|undefined>): void;
  updateTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IUpdateTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a standard update to the target identified by the given proto's
 * name. For all types of fields (primitive, message, or repeated), replaces
 * them with the given proto fields if they are under the given field mask
 * paths. Fields that match the mask but aren't populated in the given
 * target are cleared. This is an implicitly idempotent API.
 *
 * Returns an empty Target proto with only the name and ID fields populated.
 *
 * An error will be reported in the following cases:
 * - If the target does not exist.
 * - If the target or parent invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.resultstore.v2.Target} request.target
 *   Contains the name and the fields of the target to be updated.  The name
 *   format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to update.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Update operation will become a Create operation if the
 *   Target is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Target]{@link google.devtools.resultstore.v2.Target}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IUpdateTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IUpdateTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.IUpdateTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'target.name': request.target!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateTarget(request, options, callback);
  }
  mergeTarget(
      request: protos.google.devtools.resultstore.v2.IMergeTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.IMergeTargetRequest|undefined, {}|undefined
      ]>;
  mergeTarget(
      request: protos.google.devtools.resultstore.v2.IMergeTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IMergeTargetRequest|null|undefined,
          {}|null|undefined>): void;
  mergeTarget(
      request: protos.google.devtools.resultstore.v2.IMergeTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IMergeTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a merge update to the target identified by the given proto's
 * name. For primitive and message fields, replaces them with the ones in the
 * given proto if they are covered under the field mask paths.  For repeated
 * fields, merges to them with the given ones if they are covered under the
 * field mask paths. This is not an implicitly idempotent API, so a request
 * id is required to make it idempotent.
 *
 * Returns an empty Target proto with only the name and ID fields populated.
 *
 *
 * An error will be reported in the following cases:
 * - If the target does not exist.
 * - If the target or parent invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {google.devtools.resultstore.v2.Target} request.target
 *   Contains the name and the fields of the target to be merged.  The name
 *   format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to merge.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Merge operation will become a Create operation if the
 *   Target is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Target]{@link google.devtools.resultstore.v2.Target}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  mergeTarget(
      request: protos.google.devtools.resultstore.v2.IMergeTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IMergeTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IMergeTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.IMergeTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'target.name': request.target!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.mergeTarget(request, options, callback);
  }
  finalizeTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFinalizeTargetResponse,
        protos.google.devtools.resultstore.v2.IFinalizeTargetRequest|undefined, {}|undefined
      ]>;
  finalizeTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeTargetRequest|null|undefined,
          {}|null|undefined>): void;
  finalizeTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Declares the target with the given name as finalized and immutable by the
 * user. It may still be mutated by post-processing. This is an implicitly
 * idempotent API.
 *
 * An error will be reported in the following cases:
 * - If the target does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the target.  Its format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FinalizeTargetResponse]{@link google.devtools.resultstore.v2.FinalizeTargetResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  finalizeTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFinalizeTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFinalizeTargetResponse,
        protos.google.devtools.resultstore.v2.IFinalizeTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.finalizeTarget(request, options, callback);
  }
  createConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest|undefined, {}|undefined
      ]>;
  createConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
  createConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates the given configured target under the given parent target.
 * The given configured target ID is URL encoded, converted to the full
 * resource name, and assigned to the configured target's name field.
 * This is not an implicitly idempotent API, so a request id is required
 * to make it idempotent.
 *
 * Returns an empty ConfiguredTarget proto with only the name and ID fields
 * populated.
 *
 * An error will be reported in the following cases:
 * - If no config ID is provided.
 * - If a configured target with the same ID already exists.
 * - If the parent target does not exist.
 * - If the parent target or invocation is finalized.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {string} request.parent
 *   The name of the parent target in which the configured target is created.
 *   Its format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 * @param {string} request.configId
 *   The configuration identifier. This must match the ID of an existing
 *   Configuration under this Invocation. Cannot be the reserved id '-'.
 * @param {google.devtools.resultstore.v2.ConfiguredTarget} request.configuredTarget
 *   The configured target to create. Its name field will be ignored, since the
 *   name will be derived from the id field above and assigned by the server.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.ICreateConfiguredTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createConfiguredTarget(request, options, callback);
  }
  updateConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest|undefined, {}|undefined
      ]>;
  updateConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
  updateConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a standard update to the configured target identified by the given
 * proto's name. For all types of fields (primitive, message, or repeated),
 * replaces them with the given proto fields if they are under the given
 * field mask paths. Fields that match the mask but aren't populated in the
 * given configured target are cleared. This is an implicitly idempotent API.
 *
 * Returns an empty ConfiguredTarget proto with only the name and ID fields
 * populated.
 *
 * An error will be reported in the following cases:
 * - If the configured target does not exist.
 * - If the parent target or invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.resultstore.v2.ConfiguredTarget} request.configuredTarget
 *   Contains the name and the fields of the configured target to be updated.
 *   The name format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to update.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Update operation will become a Create operation if the
 *   ConfiguredTarget is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.IUpdateConfiguredTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'configured_target.name': request.configuredTarget!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateConfiguredTarget(request, options, callback);
  }
  mergeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest|undefined, {}|undefined
      ]>;
  mergeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
  mergeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a merge update to the configured target identified by the given
 * proto's name. For primitive and message fields, replaces them with the
 * ones in the given proto if they are covered under the field mask paths.
 * For repeated fields, merges to them with the given ones if they are
 * covered under the field mask paths. This is not an implicitly idempotent
 * API, so a request id is required to make it idempotent.
 *
 * Returns an empty ConfiguredTarget proto with only the name and ID fields
 * populated.
 *
 *
 * An error will be reported in the following cases:
 * - If the configured target does not exist.
 * - If the parent target or invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {google.devtools.resultstore.v2.ConfiguredTarget} request.configuredTarget
 *   Contains the name and the fields of the configured target to be merged.
 *   The name format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to merge.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Merge operation will become a Create operation if the
 *   ConfiguredTarget is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  mergeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.IMergeConfiguredTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'configured_target.name': request.configuredTarget!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.mergeConfiguredTarget(request, options, callback);
  }
  finalizeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse,
        protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest|undefined, {}|undefined
      ]>;
  finalizeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
  finalizeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Declares the configured target with the given name as finalized and
 * immutable by the user. It may still be mutated by post-processing. This is
 * an implicitly idempotent API.
 *
 * An error will be reported in the following cases:
 * - If the configured target does not exist.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the configured target. Its format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FinalizeConfiguredTargetResponse]{@link google.devtools.resultstore.v2.FinalizeConfiguredTargetResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  finalizeConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse,
          protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetResponse,
        protos.google.devtools.resultstore.v2.IFinalizeConfiguredTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.finalizeConfiguredTarget(request, options, callback);
  }
  createAction(
      request: protos.google.devtools.resultstore.v2.ICreateActionRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.ICreateActionRequest|undefined, {}|undefined
      ]>;
  createAction(
      request: protos.google.devtools.resultstore.v2.ICreateActionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.ICreateActionRequest|null|undefined,
          {}|null|undefined>): void;
  createAction(
      request: protos.google.devtools.resultstore.v2.ICreateActionRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.ICreateActionRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates the given action under the given configured target. The given
 * action ID is URL encoded, converted to the full resource name, and
 * assigned to the action's name field. This is not an implicitly
 * idempotent API, so a request id is required to make it idempotent.
 *
 * Returns an empty Action proto with only the name and ID fields populated.
 *
 * An error will be reported in the following cases:
 * - If no action ID provided.
 * - If the parent configured target does not exist.
 * - If the parent target or invocation is finalized.
 * - If an action  with the same name already exists.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {string} request.parent
 *   The name of the parent configured target in which the action is created.
 *   Its format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}
 * @param {string} request.actionId
 *   The action identifier. It can be any string up to 512 Unicode characters
 *   long, except for the reserved id '-'.
 *
 *   Recommended IDs for Test Actions:
 *   "test": For a single test action.
 *   "test_shard0_run0_attempt0" ... "test_shard9_run9_attempt9": For tests with
 *    shard/run/attempts.
 *
 *   Recommended IDs for Build Actions:
 *   "build": If you only have a single build action.
 * @param {google.devtools.resultstore.v2.Action} request.action
 *   The action to create.  Its name field will be ignored, since the
 *   name will be derived from the id field above and assigned by the server.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Action]{@link google.devtools.resultstore.v2.Action}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createAction(
      request: protos.google.devtools.resultstore.v2.ICreateActionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.ICreateActionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.ICreateActionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.ICreateActionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createAction(request, options, callback);
  }
  updateAction(
      request: protos.google.devtools.resultstore.v2.IUpdateActionRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.IUpdateActionRequest|undefined, {}|undefined
      ]>;
  updateAction(
      request: protos.google.devtools.resultstore.v2.IUpdateActionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IUpdateActionRequest|null|undefined,
          {}|null|undefined>): void;
  updateAction(
      request: protos.google.devtools.resultstore.v2.IUpdateActionRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IUpdateActionRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a standard update to the action identified by the given
 * proto's name.  For all types of fields (primitive, message, or repeated),
 * replaces them with the given proto fields if they are under the given
 * field mask paths.  Fields that match the mask but aren't populated in the
 * given action are cleared.  This is an implicitly idempotent API.
 *
 * Returns an empty Action proto with only the name and ID fields populated.
 *
 * An error will be reported in the following cases:
 * - If the action does not exist.
 * - If the parent target or invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.resultstore.v2.Action} request.action
 *   Contains the name and the fields of the action to be updated.  The
 *   name format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}/actions/${url_encode(ACTION_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to update.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Update operation will become a Create operation if the
 *   Action is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Action]{@link google.devtools.resultstore.v2.Action}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateAction(
      request: protos.google.devtools.resultstore.v2.IUpdateActionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IUpdateActionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IUpdateActionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.IUpdateActionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'action.name': request.action!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateAction(request, options, callback);
  }
  mergeAction(
      request: protos.google.devtools.resultstore.v2.IMergeActionRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.IMergeActionRequest|undefined, {}|undefined
      ]>;
  mergeAction(
      request: protos.google.devtools.resultstore.v2.IMergeActionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IMergeActionRequest|null|undefined,
          {}|null|undefined>): void;
  mergeAction(
      request: protos.google.devtools.resultstore.v2.IMergeActionRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IMergeActionRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a merge update to the action identified by the given
 * proto's name.  For primitive and message fields, replaces them with the
 * ones in the given proto if they are covered under the field mask paths.
 * For repeated fields, merges to them with the given ones if they are
 * covered under the field mask paths. This is not an implicitly idempotent
 * API, so a request id is required to make it idempotent.
 *
 * Returns an empty Action proto with only the name and ID fields populated.
 *
 *
 * An error will be reported in the following cases:
 * - If the action does not exist.
 * - If the parent target or invocation is finalized.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {google.devtools.resultstore.v2.Action} request.action
 *   Contains the name and the fields of the action to be merged.  The
 *   name format must be:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIG_ID)}/actions/${url_encode(ACTION_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to merge.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Merge operation will become a Create operation if the
 *   Action is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Action]{@link google.devtools.resultstore.v2.Action}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  mergeAction(
      request: protos.google.devtools.resultstore.v2.IMergeActionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IMergeActionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IMergeActionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.IMergeActionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'action.name': request.action!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.mergeAction(request, options, callback);
  }
  createConfiguration(
      request: protos.google.devtools.resultstore.v2.ICreateConfigurationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration,
        protos.google.devtools.resultstore.v2.ICreateConfigurationRequest|undefined, {}|undefined
      ]>;
  createConfiguration(
      request: protos.google.devtools.resultstore.v2.ICreateConfigurationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.ICreateConfigurationRequest|null|undefined,
          {}|null|undefined>): void;
  createConfiguration(
      request: protos.google.devtools.resultstore.v2.ICreateConfigurationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.ICreateConfigurationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates the given configuration under the given parent invocation. The
 * given configuration ID is URL encoded, converted to the full resource name,
 * and assigned to the configuration's name field. The configuration ID of
 * "default" should be preferred for the default configuration in a
 * single-config invocation. This is not an implicitly idempotent API, so a
 * request id is required to make it idempotent.
 *
 * Returns an empty Configuration proto with only the name and ID fields
 * populated.
 *
 * An error will be reported in the following cases:
 * - If no configuration ID is provided.
 * - If the parent invocation does not exist.
 * - If the parent invocation is finalized.
 * - If a configuration with the same name already exists.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {string} request.parent
 *   The name of the parent invocation in which the configuration is created.
 *   Its format must be invocations/${INVOCATION_ID}
 * @param {string} request.configId
 *   The configuration identifier. It can be any string up to 256 Unicode
 *   characters long. The configuration ID of "default" should be preferred for
 *   the default configuration in a single-config invocation. Cannot be the
 *   reserved id '-'.
 * @param {google.devtools.resultstore.v2.Configuration} request.configuration
 *   The configuration to create. Its name field will be ignored, since the name
 *   will be derived from the id field above and assigned by the server.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Configuration]{@link google.devtools.resultstore.v2.Configuration}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createConfiguration(
      request: protos.google.devtools.resultstore.v2.ICreateConfigurationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.ICreateConfigurationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.ICreateConfigurationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration,
        protos.google.devtools.resultstore.v2.ICreateConfigurationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createConfiguration(request, options, callback);
  }
  updateConfiguration(
      request: protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration,
        protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest|undefined, {}|undefined
      ]>;
  updateConfiguration(
      request: protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest|null|undefined,
          {}|null|undefined>): void;
  updateConfiguration(
      request: protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a standard update to the configuration identified by the given
 * proto's name. For all types of fields (primitive, message, or repeated),
 * replaces them with the given proto fields if they are under the given field
 * mask paths. Fields that match the mask but aren't populated in the given
 * configuration are cleared. This is an implicitly idempotent API.
 *
 * Returns an empty Configuration proto with only the name and ID fields
 * populated.
 *
 * An error will be reported in the following cases:
 * - If the configuration does not exist.
 * - If the parent invocation is finalized.
 * - If no field mask was given.
 * - If a given field mask path is not valid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.resultstore.v2.Configuration} request.configuration
 *   Contains the name and fields of the configuration to be updated. The name
 *   format must be:
 *   invocations/${INVOCATION_ID}/configs/${url_encode(CONFIG_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to update.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Update operation will become a Create operation if the
 *   Configuration is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Configuration]{@link google.devtools.resultstore.v2.Configuration}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateConfiguration(
      request: protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration,
        protos.google.devtools.resultstore.v2.IUpdateConfigurationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'configuration.name': request.configuration!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateConfiguration(request, options, callback);
  }
  createFileSet(
      request: protos.google.devtools.resultstore.v2.ICreateFileSetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.ICreateFileSetRequest|undefined, {}|undefined
      ]>;
  createFileSet(
      request: protos.google.devtools.resultstore.v2.ICreateFileSetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.ICreateFileSetRequest|null|undefined,
          {}|null|undefined>): void;
  createFileSet(
      request: protos.google.devtools.resultstore.v2.ICreateFileSetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.ICreateFileSetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates the given file set under the given parent invocation. The given
 * file set ID is URL encoded, converted to the full resource name, and
 * assigned to the file set's name field. This is not an implicitly idempotent
 * API, so a request id is required to make it idempotent.
 *
 * Returns an empty FileSet proto with only the name and ID fields populated.
 *
 * An error will be reported in the following cases:
 * - If no file set ID is provided.
 * - If a file set with the same name already exists.
 * - If the parent invocation does not exist.
 * - If the parent invocation is finalized.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {string} request.parent
 *   The name of the parent invocation in which the file set is created.
 *   Its format must be invocations/${INVOCATION_ID}
 * @param {string} request.fileSetId
 *   The file set identifier. It can be any string up to 256 Unicode characters
 *   long.
 * @param {google.devtools.resultstore.v2.FileSet} request.fileSet
 *   The file set to create. Its name field will be ignored, since the name will
 *   be derived from the id field above and assigned by the server.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FileSet]{@link google.devtools.resultstore.v2.FileSet}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  createFileSet(
      request: protos.google.devtools.resultstore.v2.ICreateFileSetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.ICreateFileSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.ICreateFileSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.ICreateFileSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createFileSet(request, options, callback);
  }
  updateFileSet(
      request: protos.google.devtools.resultstore.v2.IUpdateFileSetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.IUpdateFileSetRequest|undefined, {}|undefined
      ]>;
  updateFileSet(
      request: protos.google.devtools.resultstore.v2.IUpdateFileSetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IUpdateFileSetRequest|null|undefined,
          {}|null|undefined>): void;
  updateFileSet(
      request: protos.google.devtools.resultstore.v2.IUpdateFileSetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IUpdateFileSetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a standard update to the file set identified by the given proto's
 * name. For all types of fields (primitive, message, or repeated), replaces
 * them with the given proto fields if they are under the given field mask
 * paths. Fields that match the mask but aren't populated in the given
 * configuration are cleared. This is an implicitly idempotent API.
 *
 * Returns an empty FileSet proto with only the name and ID fields populated.
 *
 * An error will be reported in the following cases:
 * - If the file set does not exist.
 * - If the parent invocation is finalized.
 * - If no field mask was given.
 * - If a given field mask path is not valid.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.devtools.resultstore.v2.FileSet} request.fileSet
 *   Contains the name and fields of the file set to be updated. The name format
 *   must be: invocations/${INVOCATION_ID}/fileSets/${url_encode(FILE_SET_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to update.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Update operation will become a Create operation if the
 *   FileSet is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FileSet]{@link google.devtools.resultstore.v2.FileSet}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  updateFileSet(
      request: protos.google.devtools.resultstore.v2.IUpdateFileSetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IUpdateFileSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IUpdateFileSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.IUpdateFileSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'file_set.name': request.fileSet!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateFileSet(request, options, callback);
  }
  mergeFileSet(
      request: protos.google.devtools.resultstore.v2.IMergeFileSetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.IMergeFileSetRequest|undefined, {}|undefined
      ]>;
  mergeFileSet(
      request: protos.google.devtools.resultstore.v2.IMergeFileSetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IMergeFileSetRequest|null|undefined,
          {}|null|undefined>): void;
  mergeFileSet(
      request: protos.google.devtools.resultstore.v2.IMergeFileSetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IMergeFileSetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Applies a merge update to the file set identified by the given proto's
 * name. For primitive and message fields, updates them with the ones in the
 * given proto if they are covered under the field mask paths. For repeated
 * fields, merges to them with the given ones if they are covered under the
 * field mask paths. This is not an implicitly idempotent API, so a request
 * id is required to make it idempotent.
 *
 * Returns an empty FileSet proto with only the name and ID fields populated.
 *
 *
 * An error will be reported in the following cases:
 * - If the file set does not exist.
 * - If the parent invocation is finalized.
 * - If a given field mask path is not valid.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.requestId
 *   A unique identifier for this request. Must be set to a different value for
 *   each request that affects a given resource (eg. a random UUID). Required
 *   for the operation to be idempotent. This is achieved by ignoring this
 *   request if the last successful operation on the resource had the same
 *   request ID.  Restricted to 36 Unicode characters.
 * @param {google.devtools.resultstore.v2.FileSet} request.fileSet
 *   Contains the name and fields of the file set to be merged. The name
 *   format must be:
 *   invocations/${INVOCATION_ID}/fileSets/${url_encode(FILE_SET_ID)}
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Indicates which fields to merge.
 * @param {string} request.authorizationToken
 *   This is a token to authorize access to this invocation. It must be set to
 *   the same value that was provided in the CreateInvocationRequest.
 * @param {boolean} request.createIfNotFound
 *   If true then the Merge operation will become a Create operation if the
 *   FileSet is NOT_FOUND.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FileSet]{@link google.devtools.resultstore.v2.FileSet}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  mergeFileSet(
      request: protos.google.devtools.resultstore.v2.IMergeFileSetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IMergeFileSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IMergeFileSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.IMergeFileSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'file_set.name': request.fileSet!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.mergeFileSet(request, options, callback);
  }
  uploadBatch(
      request: protos.google.devtools.resultstore.v2.IUploadBatchRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IUploadBatchResponse,
        protos.google.devtools.resultstore.v2.IUploadBatchRequest|undefined, {}|undefined
      ]>;
  uploadBatch(
      request: protos.google.devtools.resultstore.v2.IUploadBatchRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IUploadBatchResponse,
          protos.google.devtools.resultstore.v2.IUploadBatchRequest|null|undefined,
          {}|null|undefined>): void;
  uploadBatch(
      request: protos.google.devtools.resultstore.v2.IUploadBatchRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IUploadBatchResponse,
          protos.google.devtools.resultstore.v2.IUploadBatchRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * This is the RPC used for batch upload. It supports uploading multiple
 * resources for an invocation in a transaction safe manner.
 *
 * To use this RPC, the CreateInvocationRequest must have been provided a
 * resume_token.
 *
 * Combining batch upload with normal upload on a single Invocation is not
 * supported. If an Invocation is created with a resume_token, all further
 * calls must be through UploadBatch. If an Invocation is created without
 * resume_token normal upload, all further upload calls must be through normal
 * upload RPCs.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the invocation being modified.
 *   The name format must be: invocations/${INVOCATION_ID}
 * @param {string} request.authorizationToken
 *   Required. A UUID that must match the value provided in CreateInvocationRequest.
 * @param {string} request.nextResumeToken
 *   Required. The token of this batch, that will be committed in this UploadBatchRequest.
 *   If this matches the previously uploaded resume_token, then this request
 *   will silently do nothing.
 *   See CreateInvocationRequest.initial_resume_token for more information.
 *   Must be web safe Base64 encoded bytes.
 * @param {string} request.resumeToken
 *   Required. The token of the previous batch that was committed in a UploadBatchRequest.
 *   This will be checked after next_resume_token match is checked. If this does
 *   not match the previously uploaded resume_token, a 409 Conflict (HTTPS) or
 *   ABORTED (gRPC ) error code indicating a concurrency
 *   failure will be returned, and that the user should call
 *   GetInvocationUploadMetadata to fetch the current resume_token to
 *   reconstruct the state of the upload to resume it.
 *   See CreateInvocationRequest.initial_resume_token for more information.
 *   Must be web safe Base64 encoded bytes.
 * @param {Buffer} request.uploaderState
 *   Client-specific data used to resume batch upload if an error occurs and
 *   retry is needed. This serves a role closely related to resume_token, as
 *   both fields may be used to provide state required to restore a Batch
 *   Upload, but they differ in two important aspects:
 *    - it is not compared to previous values, and as such does not provide
 *      concurrency control;
 *    - it allows for a larger payload, since the contents are never
 *      inspected/compared;
 *   The size of the message must be within 1 MiB. Too large requests will be
 *   rejected.
 * @param {number[]} request.uploadRequests
 *   The individual upload requests for this batch.
 *   The recommend total size for a batch is 10 MiB. Too large requests may be
 *   rejected.
 *   This field may be empty, allowing this RPC to be used like TouchInvocation.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UploadBatchResponse]{@link google.devtools.resultstore.v2.UploadBatchResponse}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  uploadBatch(
      request: protos.google.devtools.resultstore.v2.IUploadBatchRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IUploadBatchResponse,
          protos.google.devtools.resultstore.v2.IUploadBatchRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IUploadBatchResponse,
          protos.google.devtools.resultstore.v2.IUploadBatchRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IUploadBatchResponse,
        protos.google.devtools.resultstore.v2.IUploadBatchRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.uploadBatch(request, options, callback);
  }
  getInvocationUploadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IUploadMetadata,
        protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest|undefined, {}|undefined
      ]>;
  getInvocationUploadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IUploadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest|null|undefined,
          {}|null|undefined>): void;
  getInvocationUploadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IUploadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Provides a way to read the metadata for an invocation.
 * The UploadMetadata could still be retrieved by this RPC even the Invocation
 * has been finalized.
 * This API requires setting a response FieldMask via 'fields' URL query
 * parameter or X-Goog-FieldMask HTTP/gRPC header.
 *
 * An error will be reported in the following case:
 * - If the invocation does not exist.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required
 *   The name of the UploadMetadata being requested.
 *   The name format must be: invocations/${INVOCATION_ID}/uploadMetadata
 * @param {string} request.authorizationToken
 *   Required. A UUID that must match the value provided in CreateInvocationRequest.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UploadMetadata]{@link google.devtools.resultstore.v2.UploadMetadata}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getInvocationUploadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IUploadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IUploadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IUploadMetadata,
        protos.google.devtools.resultstore.v2.IGetInvocationUploadMetadataRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getInvocationUploadMetadata(request, options, callback);
  }


  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.resultStoreUploadStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
