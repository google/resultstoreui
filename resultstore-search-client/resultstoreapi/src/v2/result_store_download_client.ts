// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './result_store_download_client_config.json';

const version = require('../../../package.json').version;

/**
 *  This is the interface used to download information from the ResultStore
 *  database.
 *
 *  Most APIs require setting a response FieldMask via the 'fields' URL query
 *  parameter or the X-Goog-FieldMask HTTP/gRPC header.
 * @class
 * @memberof v2
 */
export class ResultStoreDownloadClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}, batching: {}};
  innerApiCalls: {[name: string]: Function};
  resultStoreDownloadStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ResultStoreDownloadClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof ResultStoreDownloadClient;
    const servicePath = opts && opts.servicePath ?
        opts.servicePath :
        ((opts && opts.apiEndpoint) ? opts.apiEndpoint :
                                      staticMembers.servicePath);
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;
    opts.clientConfig = opts.clientConfig || {};

    const isBrowser = (typeof window !== 'undefined');
    if (isBrowser){
      opts.fallback = true;
    }
    // If we are in browser, we are already using fallback because of the
    // "browser" field in package.json.
    // But if we were explicitly requested to use fallback, let's do it now.
    this._gaxModule = !isBrowser && opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof ResultStoreDownloadClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      searchInvocations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'invocations'),
      listConfigurations:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'configurations'),
      listTargets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'targets'),
      listConfiguredTargets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'configuredTargets'),
      listActions:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'actions'),
      listFileSets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fileSets'),
      traverseFileSets:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fileSets')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.devtools.resultstore.v2.ResultStoreDownload', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.resultStoreDownloadStub) {
      return this.resultStoreDownloadStub;
    }

    // Put together the "service stub" for
    // google.devtools.resultstore.v2.ResultStoreDownload.
    this.resultStoreDownloadStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.devtools.resultstore.v2.ResultStoreDownload') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.resultstore.v2.ResultStoreDownload,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const resultStoreDownloadStubMethods =
        ['getInvocation', 'searchInvocations', 'getInvocationDownloadMetadata', 'getConfiguration', 'listConfigurations', 'getTarget', 'listTargets', 'getConfiguredTarget', 'listConfiguredTargets', 'getAction', 'listActions', 'getFileSet', 'listFileSets', 'traverseFileSets'];
    for (const methodName of resultStoreDownloadStubMethods) {
      const callPromise = this.resultStoreDownloadStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
            this.descriptors.stream[methodName] ||
            this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.resultStoreDownloadStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'resultstore.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'resultstore.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getInvocation(
      request: protos.google.devtools.resultstore.v2.IGetInvocationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.IGetInvocationRequest|undefined, {}|undefined
      ]>;
  getInvocation(
      request: protos.google.devtools.resultstore.v2.IGetInvocationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IGetInvocationRequest|null|undefined,
          {}|null|undefined>): void;
  getInvocation(
      request: protos.google.devtools.resultstore.v2.IGetInvocationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IGetInvocationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the invocation with the given name.
 *
 * An error will be reported in the following cases:
 * - If the invocation is not found.
 * - If the given invocation name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the invocation to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}
 *   where INVOCATION_ID must be an RFC 4122-compliant random UUID.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Invocation]{@link google.devtools.resultstore.v2.Invocation}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getInvocation(
      request: protos.google.devtools.resultstore.v2.IGetInvocationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IGetInvocationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IInvocation,
          protos.google.devtools.resultstore.v2.IGetInvocationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation,
        protos.google.devtools.resultstore.v2.IGetInvocationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getInvocation(request, options, callback);
  }
  getInvocationDownloadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IDownloadMetadata,
        protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest|undefined, {}|undefined
      ]>;
  getInvocationDownloadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IDownloadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest|null|undefined,
          {}|null|undefined>): void;
  getInvocationDownloadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IDownloadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the metadata for an invocation with the given name.
 *
 * An error will be reported in the following cases:
 * - If the invocation is not found.
 * - If the given invocation name is badly formatted.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the download metadata to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}/downloadMetadata
 *   where INVOCATION_ID must be an RFC 4122-compliant random UUID.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DownloadMetadata]{@link google.devtools.resultstore.v2.DownloadMetadata}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getInvocationDownloadMetadata(
      request: protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IDownloadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IDownloadMetadata,
          protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IDownloadMetadata,
        protos.google.devtools.resultstore.v2.IGetInvocationDownloadMetadataRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getInvocationDownloadMetadata(request, options, callback);
  }
  getConfiguration(
      request: protos.google.devtools.resultstore.v2.IGetConfigurationRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration,
        protos.google.devtools.resultstore.v2.IGetConfigurationRequest|undefined, {}|undefined
      ]>;
  getConfiguration(
      request: protos.google.devtools.resultstore.v2.IGetConfigurationRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IGetConfigurationRequest|null|undefined,
          {}|null|undefined>): void;
  getConfiguration(
      request: protos.google.devtools.resultstore.v2.IGetConfigurationRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IGetConfigurationRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the configuration with the given name.
 *
 * An error will be reported in the following cases:
 * - If the configuration or its parent invocation is not found.
 * - If the given configuration name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the configuration to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}/configs/${url_encode(CONFIGURATION_ID)}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Configuration]{@link google.devtools.resultstore.v2.Configuration}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getConfiguration(
      request: protos.google.devtools.resultstore.v2.IGetConfigurationRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IGetConfigurationRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguration,
          protos.google.devtools.resultstore.v2.IGetConfigurationRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration,
        protos.google.devtools.resultstore.v2.IGetConfigurationRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getConfiguration(request, options, callback);
  }
  getTarget(
      request: protos.google.devtools.resultstore.v2.IGetTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.IGetTargetRequest|undefined, {}|undefined
      ]>;
  getTarget(
      request: protos.google.devtools.resultstore.v2.IGetTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IGetTargetRequest|null|undefined,
          {}|null|undefined>): void;
  getTarget(
      request: protos.google.devtools.resultstore.v2.IGetTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IGetTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the target with the given name.
 *
 * An error will be reported in the following cases:
 * - If the target or its parent invocation is not found.
 * - If the given target name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the target to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Target]{@link google.devtools.resultstore.v2.Target}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getTarget(
      request: protos.google.devtools.resultstore.v2.IGetTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IGetTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.ITarget,
          protos.google.devtools.resultstore.v2.IGetTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget,
        protos.google.devtools.resultstore.v2.IGetTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getTarget(request, options, callback);
  }
  getConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest|undefined, {}|undefined
      ]>;
  getConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
  getConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the configured target with the given name.
 *
 * An error will be reported in the following cases:
 * - If the configured target is not found.
 * - If the given name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the configured target to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getConfiguredTarget(
      request: protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IConfiguredTarget,
          protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget,
        protos.google.devtools.resultstore.v2.IGetConfiguredTargetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getConfiguredTarget(request, options, callback);
  }
  getAction(
      request: protos.google.devtools.resultstore.v2.IGetActionRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.IGetActionRequest|undefined, {}|undefined
      ]>;
  getAction(
      request: protos.google.devtools.resultstore.v2.IGetActionRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IGetActionRequest|null|undefined,
          {}|null|undefined>): void;
  getAction(
      request: protos.google.devtools.resultstore.v2.IGetActionRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IGetActionRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the action with the given name.
 *
 * An error will be reported in the following cases:
 * - If the action is not found.
 * - If the given name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the action to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}/actions/${url_encode(ACTION_ID)}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Action]{@link google.devtools.resultstore.v2.Action}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getAction(
      request: protos.google.devtools.resultstore.v2.IGetActionRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IGetActionRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IAction,
          protos.google.devtools.resultstore.v2.IGetActionRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction,
        protos.google.devtools.resultstore.v2.IGetActionRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getAction(request, options, callback);
  }
  getFileSet(
      request: protos.google.devtools.resultstore.v2.IGetFileSetRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.IGetFileSetRequest|undefined, {}|undefined
      ]>;
  getFileSet(
      request: protos.google.devtools.resultstore.v2.IGetFileSetRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IGetFileSetRequest|null|undefined,
          {}|null|undefined>): void;
  getFileSet(
      request: protos.google.devtools.resultstore.v2.IGetFileSetRequest,
      callback: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IGetFileSetRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Retrieves the file set with the given name.
 *
 * An error will be reported in the following cases:
 * - If the file set or its parent invocation is not found.
 * - If the given file set name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the file set to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}/fileSets/${url_encode(FILE_SET_ID)}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FileSet]{@link google.devtools.resultstore.v2.FileSet}.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  getFileSet(
      request: protos.google.devtools.resultstore.v2.IGetFileSetRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IGetFileSetRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.resultstore.v2.IFileSet,
          protos.google.devtools.resultstore.v2.IGetFileSetRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet,
        protos.google.devtools.resultstore.v2.IGetFileSetRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getFileSet(request, options, callback);
  }

  searchInvocations(
      request: protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation[],
        protos.google.devtools.resultstore.v2.ISearchInvocationsRequest|null,
        protos.google.devtools.resultstore.v2.ISearchInvocationsResponse
      ]>;
  searchInvocations(
      request: protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
          protos.google.devtools.resultstore.v2.ISearchInvocationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IInvocation>): void;
  searchInvocations(
      request: protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
          protos.google.devtools.resultstore.v2.ISearchInvocationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IInvocation>): void;
/**
 * Searches for invocations matching the given query parameters. Results will
 * be ordered by timing.start_time with most recent first, but total ordering
 * of results is not guaranteed when difference in timestamps is very small.
 * Results may be stale.
 *
 *
 * An error will be reported in the following cases:
 * - If a query string is not provided
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of items to return. Zero means all, but may be capped by
 *   the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous Search request, if
 *   any.
 * @param {number} request.offset
 *   Absolute number of results to skip. May be rejected if too high.
 * @param {string} request.query
 *   A filtering query string.
 *
 *   Only a limited number of fields and operators are supported. Not every
 *   field supports every operator.
 *
 *   Fields that support equals ("=") restrictions:
 *
 *   name
 *   status_attributes.status
 *   workspace_info.hostname
 *
 *   Fields that support contains (":") restrictions:
 *
 *   invocation_attributes.users
 *   invocation_attributes.labels
 *
 *   Fields that support comparison ("<", "<=", ">", ">=") restrictions;
 *
 *   timing.start_time
 *
 *   Supported custom function global restrictions:
 *
 *   propertyEquals("key", "value")
 * @param {string} request.projectId
 *   The project id to search under.
 * @param {boolean} request.exactMatch
 *   If true, all equals or contains restrictions on string fields in query will
 *   require exact match. Otherwise, a string field restriction may ignore case
 *   and punctuation.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Invocation]{@link google.devtools.resultstore.v2.Invocation}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Invocation]{@link google.devtools.resultstore.v2.Invocation} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [SearchInvocationsRequest]{@link google.devtools.resultstore.v2.SearchInvocationsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [SearchInvocationsResponse]{@link google.devtools.resultstore.v2.SearchInvocationsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  searchInvocations(
      request: protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
          protos.google.devtools.resultstore.v2.ISearchInvocationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IInvocation>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
          protos.google.devtools.resultstore.v2.ISearchInvocationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IInvocation>):
      Promise<[
        protos.google.devtools.resultstore.v2.IInvocation[],
        protos.google.devtools.resultstore.v2.ISearchInvocationsRequest|null,
        protos.google.devtools.resultstore.v2.ISearchInvocationsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.searchInvocations(request, options, callback);
  }

/**
 * Equivalent to {@link searchInvocations}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link searchInvocations} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of items to return. Zero means all, but may be capped by
 *   the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous Search request, if
 *   any.
 * @param {number} request.offset
 *   Absolute number of results to skip. May be rejected if too high.
 * @param {string} request.query
 *   A filtering query string.
 *
 *   Only a limited number of fields and operators are supported. Not every
 *   field supports every operator.
 *
 *   Fields that support equals ("=") restrictions:
 *
 *   name
 *   status_attributes.status
 *   workspace_info.hostname
 *
 *   Fields that support contains (":") restrictions:
 *
 *   invocation_attributes.users
 *   invocation_attributes.labels
 *
 *   Fields that support comparison ("<", "<=", ">", ">=") restrictions;
 *
 *   timing.start_time
 *
 *   Supported custom function global restrictions:
 *
 *   propertyEquals("key", "value")
 * @param {string} request.projectId
 *   The project id to search under.
 * @param {boolean} request.exactMatch
 *   If true, all equals or contains restrictions on string fields in query will
 *   require exact match. Otherwise, a string field restriction may ignore case
 *   and punctuation.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Invocation]{@link google.devtools.resultstore.v2.Invocation} on 'data' event.
 */
  searchInvocationsStream(
      request?: protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.searchInvocations.createStream(
      this.innerApiCalls.searchInvocations as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link searchInvocations}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of items to return. Zero means all, but may be capped by
 *   the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous Search request, if
 *   any.
 * @param {number} request.offset
 *   Absolute number of results to skip. May be rejected if too high.
 * @param {string} request.query
 *   A filtering query string.
 *
 *   Only a limited number of fields and operators are supported. Not every
 *   field supports every operator.
 *
 *   Fields that support equals ("=") restrictions:
 *
 *   name
 *   status_attributes.status
 *   workspace_info.hostname
 *
 *   Fields that support contains (":") restrictions:
 *
 *   invocation_attributes.users
 *   invocation_attributes.labels
 *
 *   Fields that support comparison ("<", "<=", ">", ">=") restrictions;
 *
 *   timing.start_time
 *
 *   Supported custom function global restrictions:
 *
 *   propertyEquals("key", "value")
 * @param {string} request.projectId
 *   The project id to search under.
 * @param {boolean} request.exactMatch
 *   If true, all equals or contains restrictions on string fields in query will
 *   require exact match. Otherwise, a string field restriction may ignore case
 *   and punctuation.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  searchInvocationsAsync(
      request?: protos.google.devtools.resultstore.v2.ISearchInvocationsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.IInvocation>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.searchInvocations.asyncIterate(
      this.innerApiCalls['searchInvocations'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.IInvocation>;
  }
  listConfigurations(
      request: protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration[],
        protos.google.devtools.resultstore.v2.IListConfigurationsRequest|null,
        protos.google.devtools.resultstore.v2.IListConfigurationsResponse
      ]>;
  listConfigurations(
      request: protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
          protos.google.devtools.resultstore.v2.IListConfigurationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguration>): void;
  listConfigurations(
      request: protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
          protos.google.devtools.resultstore.v2.IListConfigurationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguration>): void;
/**
 * Retrieves all configurations for a parent invocation.
 * This might be limited by user or server,
 * in which case a continuation token is provided.
 * The order in which results are returned is undefined, but stable.
 *
 * An error will be reported in the following cases:
 * - If the parent invocation is not found.
 * - If the given parent invocation name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the configurations to retrieve.
 *   It must match this format: invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Configuration]{@link google.devtools.resultstore.v2.Configuration}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Configuration]{@link google.devtools.resultstore.v2.Configuration} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListConfigurationsRequest]{@link google.devtools.resultstore.v2.ListConfigurationsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListConfigurationsResponse]{@link google.devtools.resultstore.v2.ListConfigurationsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listConfigurations(
      request: protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
          protos.google.devtools.resultstore.v2.IListConfigurationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguration>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
          protos.google.devtools.resultstore.v2.IListConfigurationsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguration>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguration[],
        protos.google.devtools.resultstore.v2.IListConfigurationsRequest|null,
        protos.google.devtools.resultstore.v2.IListConfigurationsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listConfigurations(request, options, callback);
  }

/**
 * Equivalent to {@link listConfigurations}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listConfigurations} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the configurations to retrieve.
 *   It must match this format: invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Configuration]{@link google.devtools.resultstore.v2.Configuration} on 'data' event.
 */
  listConfigurationsStream(
      request?: protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listConfigurations.createStream(
      this.innerApiCalls.listConfigurations as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listConfigurations}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the configurations to retrieve.
 *   It must match this format: invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listConfigurationsAsync(
      request?: protos.google.devtools.resultstore.v2.IListConfigurationsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.IConfiguration>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listConfigurations.asyncIterate(
      this.innerApiCalls['listConfigurations'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.IConfiguration>;
  }
  listTargets(
      request: protos.google.devtools.resultstore.v2.IListTargetsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget[],
        protos.google.devtools.resultstore.v2.IListTargetsRequest|null,
        protos.google.devtools.resultstore.v2.IListTargetsResponse
      ]>;
  listTargets(
      request: protos.google.devtools.resultstore.v2.IListTargetsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListTargetsRequest,
          protos.google.devtools.resultstore.v2.IListTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.ITarget>): void;
  listTargets(
      request: protos.google.devtools.resultstore.v2.IListTargetsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListTargetsRequest,
          protos.google.devtools.resultstore.v2.IListTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.ITarget>): void;
/**
 * Retrieves all targets for a parent invocation.  This might be limited by
 * user or server, in which case a continuation token is provided.
 * The order in which results are returned is undefined, but stable.
 *
 * An error will be reported in the following cases:
 * - If the parent is not found.
 * - If the given parent name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the targets to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Target]{@link google.devtools.resultstore.v2.Target}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Target]{@link google.devtools.resultstore.v2.Target} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListTargetsRequest]{@link google.devtools.resultstore.v2.ListTargetsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListTargetsResponse]{@link google.devtools.resultstore.v2.ListTargetsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listTargets(
      request: protos.google.devtools.resultstore.v2.IListTargetsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.IListTargetsRequest,
          protos.google.devtools.resultstore.v2.IListTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.ITarget>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListTargetsRequest,
          protos.google.devtools.resultstore.v2.IListTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.ITarget>):
      Promise<[
        protos.google.devtools.resultstore.v2.ITarget[],
        protos.google.devtools.resultstore.v2.IListTargetsRequest|null,
        protos.google.devtools.resultstore.v2.IListTargetsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listTargets(request, options, callback);
  }

/**
 * Equivalent to {@link listTargets}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listTargets} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the targets to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Target]{@link google.devtools.resultstore.v2.Target} on 'data' event.
 */
  listTargetsStream(
      request?: protos.google.devtools.resultstore.v2.IListTargetsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTargets.createStream(
      this.innerApiCalls.listTargets as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listTargets}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the targets to retrieve. It must match this format:
 *   invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listTargetsAsync(
      request?: protos.google.devtools.resultstore.v2.IListTargetsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.ITarget>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listTargets.asyncIterate(
      this.innerApiCalls['listTargets'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.ITarget>;
  }
  listConfiguredTargets(
      request: protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget[],
        protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest|null,
        protos.google.devtools.resultstore.v2.IListConfiguredTargetsResponse
      ]>;
  listConfiguredTargets(
      request: protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguredTarget>): void;
  listConfiguredTargets(
      request: protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguredTarget>): void;
/**
 * Retrieves all configured targets for a parent invocation/target.
 * This might be limited by user or server, in which case a continuation
 * token is provided.  Supports '-' for targetId meaning all targets.
 * The order in which results are returned is undefined, but stable.
 *
 * An error will be reported in the following cases:
 * - If the parent is not found.
 * - If the given parent name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation and target name of the configured targets to retrieve.
 *   It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 *   Supports '-' for ${TARGET_ID} meaning all targets.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListConfiguredTargetsRequest]{@link google.devtools.resultstore.v2.ListConfiguredTargetsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListConfiguredTargetsResponse]{@link google.devtools.resultstore.v2.ListConfiguredTargetsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listConfiguredTargets(
      request: protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguredTarget>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
          protos.google.devtools.resultstore.v2.IListConfiguredTargetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IConfiguredTarget>):
      Promise<[
        protos.google.devtools.resultstore.v2.IConfiguredTarget[],
        protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest|null,
        protos.google.devtools.resultstore.v2.IListConfiguredTargetsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listConfiguredTargets(request, options, callback);
  }

/**
 * Equivalent to {@link listConfiguredTargets}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listConfiguredTargets} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation and target name of the configured targets to retrieve.
 *   It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 *   Supports '-' for ${TARGET_ID} meaning all targets.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ConfiguredTarget]{@link google.devtools.resultstore.v2.ConfiguredTarget} on 'data' event.
 */
  listConfiguredTargetsStream(
      request?: protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listConfiguredTargets.createStream(
      this.innerApiCalls.listConfiguredTargets as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listConfiguredTargets}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation and target name of the configured targets to retrieve.
 *   It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}
 *   Supports '-' for ${TARGET_ID} meaning all targets.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listConfiguredTargetsAsync(
      request?: protos.google.devtools.resultstore.v2.IListConfiguredTargetsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.IConfiguredTarget>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listConfiguredTargets.asyncIterate(
      this.innerApiCalls['listConfiguredTargets'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.IConfiguredTarget>;
  }
  listActions(
      request: protos.google.devtools.resultstore.v2.IListActionsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction[],
        protos.google.devtools.resultstore.v2.IListActionsRequest|null,
        protos.google.devtools.resultstore.v2.IListActionsResponse
      ]>;
  listActions(
      request: protos.google.devtools.resultstore.v2.IListActionsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListActionsRequest,
          protos.google.devtools.resultstore.v2.IListActionsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IAction>): void;
  listActions(
      request: protos.google.devtools.resultstore.v2.IListActionsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListActionsRequest,
          protos.google.devtools.resultstore.v2.IListActionsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IAction>): void;
/**
 * Retrieves all actions for a parent invocation/target/configuration.
 * This might be limited by user or server, in which case a continuation
 * token is provided.  Supports '-' for configurationId to mean all
 * actions for all configurations for a target, or '-' for targetId and
 * configurationId to mean all actions for all configurations and all targets.
 * Does not support targetId '-' with a specified configuration.
 * The order in which results are returned is undefined, but stable.
 *
 * An error will be reported in the following cases:
 * - If the parent is not found.
 * - If the given parent name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation, target, and configuration name of the action to retrieve.
 *   It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}
 *   Supports '-' for ${CONFIGURATION_ID} to mean all Actions for all
 *   Configurations for a Target, or '-' for ${TARGET_ID} and
 *   ${CONFIGURATION_ID} to mean all Actions for all Configurations and all
 *   Targets. Does not support ${TARGET_ID} '-' with a specified configuration.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Action]{@link google.devtools.resultstore.v2.Action}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [Action]{@link google.devtools.resultstore.v2.Action} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListActionsRequest]{@link google.devtools.resultstore.v2.ListActionsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListActionsResponse]{@link google.devtools.resultstore.v2.ListActionsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listActions(
      request: protos.google.devtools.resultstore.v2.IListActionsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.IListActionsRequest,
          protos.google.devtools.resultstore.v2.IListActionsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IAction>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListActionsRequest,
          protos.google.devtools.resultstore.v2.IListActionsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IAction>):
      Promise<[
        protos.google.devtools.resultstore.v2.IAction[],
        protos.google.devtools.resultstore.v2.IListActionsRequest|null,
        protos.google.devtools.resultstore.v2.IListActionsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listActions(request, options, callback);
  }

/**
 * Equivalent to {@link listActions}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listActions} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation, target, and configuration name of the action to retrieve.
 *   It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}
 *   Supports '-' for ${CONFIGURATION_ID} to mean all Actions for all
 *   Configurations for a Target, or '-' for ${TARGET_ID} and
 *   ${CONFIGURATION_ID} to mean all Actions for all Configurations and all
 *   Targets. Does not support ${TARGET_ID} '-' with a specified configuration.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Action]{@link google.devtools.resultstore.v2.Action} on 'data' event.
 */
  listActionsStream(
      request?: protos.google.devtools.resultstore.v2.IListActionsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listActions.createStream(
      this.innerApiCalls.listActions as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listActions}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation, target, and configuration name of the action to retrieve.
 *   It must match this format:
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}
 *   Supports '-' for ${CONFIGURATION_ID} to mean all Actions for all
 *   Configurations for a Target, or '-' for ${TARGET_ID} and
 *   ${CONFIGURATION_ID} to mean all Actions for all Configurations and all
 *   Targets. Does not support ${TARGET_ID} '-' with a specified configuration.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listActionsAsync(
      request?: protos.google.devtools.resultstore.v2.IListActionsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.IAction>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listActions.asyncIterate(
      this.innerApiCalls['listActions'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.IAction>;
  }
  listFileSets(
      request: protos.google.devtools.resultstore.v2.IListFileSetsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet[],
        protos.google.devtools.resultstore.v2.IListFileSetsRequest|null,
        protos.google.devtools.resultstore.v2.IListFileSetsResponse
      ]>;
  listFileSets(
      request: protos.google.devtools.resultstore.v2.IListFileSetsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListFileSetsRequest,
          protos.google.devtools.resultstore.v2.IListFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>): void;
  listFileSets(
      request: protos.google.devtools.resultstore.v2.IListFileSetsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListFileSetsRequest,
          protos.google.devtools.resultstore.v2.IListFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>): void;
/**
 * Retrieves all file sets for a parent invocation.
 * This might be limited by user or server,
 * in which case a continuation token is provided.
 * The order in which results are returned is undefined, but stable.
 *
 * An error will be reported in the following cases:
 * - If the parent invocation is not found.
 * - If the given parent invocation name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the file sets to retrieve.
 *   It must match this format: invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [FileSet]{@link google.devtools.resultstore.v2.FileSet}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [FileSet]{@link google.devtools.resultstore.v2.FileSet} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [ListFileSetsRequest]{@link google.devtools.resultstore.v2.ListFileSetsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [ListFileSetsResponse]{@link google.devtools.resultstore.v2.ListFileSetsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  listFileSets(
      request: protos.google.devtools.resultstore.v2.IListFileSetsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.IListFileSetsRequest,
          protos.google.devtools.resultstore.v2.IListFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.IListFileSetsRequest,
          protos.google.devtools.resultstore.v2.IListFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet[],
        protos.google.devtools.resultstore.v2.IListFileSetsRequest|null,
        protos.google.devtools.resultstore.v2.IListFileSetsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listFileSets(request, options, callback);
  }

/**
 * Equivalent to {@link listFileSets}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link listFileSets} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the file sets to retrieve.
 *   It must match this format: invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [FileSet]{@link google.devtools.resultstore.v2.FileSet} on 'data' event.
 */
  listFileSetsStream(
      request?: protos.google.devtools.resultstore.v2.IListFileSetsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listFileSets.createStream(
      this.innerApiCalls.listFileSets as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link listFileSets}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The invocation name of the file sets to retrieve.
 *   It must match this format: invocations/${INVOCATION_ID}
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 * @param {string} request.filter
 *   A filter to return only resources that match it.
 *   Any fields used in the filter must be also specified in the field mask.
 *   May cause pages with 0 results and a next_page_token to be returned.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  listFileSetsAsync(
      request?: protos.google.devtools.resultstore.v2.IListFileSetsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.IFileSet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listFileSets.asyncIterate(
      this.innerApiCalls['listFileSets'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.IFileSet>;
  }
  traverseFileSets(
      request: protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet[],
        protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest|null,
        protos.google.devtools.resultstore.v2.ITraverseFileSetsResponse
      ]>;
  traverseFileSets(
      request: protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
      options: gax.CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
          protos.google.devtools.resultstore.v2.ITraverseFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>): void;
  traverseFileSets(
      request: protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
      callback: PaginationCallback<
          protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
          protos.google.devtools.resultstore.v2.ITraverseFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>): void;
/**
 * Returns the transitive closure of FileSets. This might be limited by user
 * or server, in which case a continuation token is provided.
 * The order in which results are returned is undefined, and unstable.
 *
 * An error will be reported in the following cases:
 * - If page_token is too large to continue the calculation.
 * - If the resource is not found.
 * - If the given resource name is badly formatted.
 * - If no field mask was given.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the resource to traverse.
 *   It must match one of the following formats:
 *
 *   invocations/${INVOCATION_ID}/fileSets/${url_encode(FILE_SET_ID)}
 *   This returns the transitive closure of FileSets referenced by the given
 *   FileSet, including itself.
 *
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}/actions/${url_encode(ACTION_ID)}
 *   This returns the transitive closure of FileSets referenced by the given
 *   Action. If ${ACTION_ID} is "-", this returns the transitive closure of
 *   FileSets referenced by all Actions under the given ConfiguredTarget.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 *   Page tokens will become larger with every page returned, and if a page
 *   token becomes too large, it will no longer be possible to continue to
 *   calculate the transitive dependencies. The API will return a 400
 *   Bad request (HTTPS), or a INVALID_ARGUMENT (gRPC ) when
 *   this happens.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 *   Not yet implemented. 0 for default.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [FileSet]{@link google.devtools.resultstore.v2.FileSet}.
 *   The client library support auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *
 *   When autoPaginate: false is specified through options, the array has three elements.
 *   The first element is Array of [FileSet]{@link google.devtools.resultstore.v2.FileSet} that corresponds to
 *   the one page received from the API server.
 *   If the second element is not null it contains the request object of type [TraverseFileSetsRequest]{@link google.devtools.resultstore.v2.TraverseFileSetsRequest}
 *   that can be used to obtain the next page of the results.
 *   If it is null, the next page does not exist.
 *   The third element contains the raw response received from the API server. Its type is
 *   [TraverseFileSetsResponse]{@link google.devtools.resultstore.v2.TraverseFileSetsResponse}.
 *
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 */
  traverseFileSets(
      request: protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
      optionsOrCallback?: gax.CallOptions|PaginationCallback<
          protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
          protos.google.devtools.resultstore.v2.ITraverseFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>,
      callback?: PaginationCallback<
          protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
          protos.google.devtools.resultstore.v2.ITraverseFileSetsResponse|null|undefined,
          protos.google.devtools.resultstore.v2.IFileSet>):
      Promise<[
        protos.google.devtools.resultstore.v2.IFileSet[],
        protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest|null,
        protos.google.devtools.resultstore.v2.ITraverseFileSetsResponse
      ]>|void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.traverseFileSets(request, options, callback);
  }

/**
 * Equivalent to {@link traverseFileSets}, but returns a NodeJS Stream object.
 *
 * This fetches the paged responses for {@link traverseFileSets} continuously
 * and invokes the callback registered for 'data' event for each element in the
 * responses.
 *
 * The returned object has 'end' method when no more elements are required.
 *
 * autoPaginate option will be ignored.
 *
 * @see {@link https://nodejs.org/api/stream.html}
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the resource to traverse.
 *   It must match one of the following formats:
 *
 *   invocations/${INVOCATION_ID}/fileSets/${url_encode(FILE_SET_ID)}
 *   This returns the transitive closure of FileSets referenced by the given
 *   FileSet, including itself.
 *
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}/actions/${url_encode(ACTION_ID)}
 *   This returns the transitive closure of FileSets referenced by the given
 *   Action. If ${ACTION_ID} is "-", this returns the transitive closure of
 *   FileSets referenced by all Actions under the given ConfiguredTarget.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 *   Page tokens will become larger with every page returned, and if a page
 *   token becomes too large, it will no longer be possible to continue to
 *   calculate the transitive dependencies. The API will return a 400
 *   Bad request (HTTPS), or a INVALID_ARGUMENT (gRPC ) when
 *   this happens.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 *   Not yet implemented. 0 for default.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [FileSet]{@link google.devtools.resultstore.v2.FileSet} on 'data' event.
 */
  traverseFileSetsStream(
      request?: protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
      options?: gax.CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.traverseFileSets.createStream(
      this.innerApiCalls.traverseFileSets as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to {@link traverseFileSets}, but returns an iterable object.
 *
 * for-await-of syntax is used with the iterable to recursively get response element on-demand.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the resource to traverse.
 *   It must match one of the following formats:
 *
 *   invocations/${INVOCATION_ID}/fileSets/${url_encode(FILE_SET_ID)}
 *   This returns the transitive closure of FileSets referenced by the given
 *   FileSet, including itself.
 *
 *   invocations/${INVOCATION_ID}/targets/${url_encode(TARGET_ID)}/configuredTargets/${url_encode(CONFIGURATION_ID)}/actions/${url_encode(ACTION_ID)}
 *   This returns the transitive closure of FileSets referenced by the given
 *   Action. If ${ACTION_ID} is "-", this returns the transitive closure of
 *   FileSets referenced by all Actions under the given ConfiguredTarget.
 * @param {number} request.pageSize
 *   The maximum number of items to return.
 *   Zero means all, but may be capped by the server.
 * @param {string} request.pageToken
 *   The next_page_token value returned from a previous List request, if any.
 *   Page tokens will become larger with every page returned, and if a page
 *   token becomes too large, it will no longer be possible to continue to
 *   calculate the transitive dependencies. The API will return a 400
 *   Bad request (HTTPS), or a INVALID_ARGUMENT (gRPC ) when
 *   this happens.
 * @param {number} request.offset
 *   Absolute number of results to skip.
 *   Not yet implemented. 0 for default.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
 */
  traverseFileSetsAsync(
      request?: protos.google.devtools.resultstore.v2.ITraverseFileSetsRequest,
      options?: gax.CallOptions):
    AsyncIterable<protos.google.devtools.resultstore.v2.IFileSet>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.traverseFileSets.asyncIterate(
      this.innerApiCalls['traverseFileSets'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.resultstore.v2.IFileSet>;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.resultStoreDownloadStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
