syntax = "proto3";

package resultstoresearch.v1;

import "invocation.proto";
import "target.proto";
import "file.proto";

// This is the interface used to download information from the ResultStore
// database.
//
// Most APIs require setting a response FieldMask via the 'fields' URL query
// parameter or the X-Goog-FieldMask HTTP/gRPC header.
service ResultStoreDownload {
  // Searches for invocations matching the given query parameters. Results will
  // be ordered by timing.start_time with most recent first, but total ordering
  // of results is not guaranteed when difference in timestamps is very small.
  // Results may be stale.
  //
  //
  // An error will be reported in the following cases:
  // - If a query string is not provided
  // - If no field mask was given.
  rpc SearchInvocations(SearchInvocationsRequest)
      returns (SearchInvocationsResponse);

  // Retrieves the invocation with the given name.
  //
  // An error will be reported in the following cases:
  // - If the invocation is not found.
  // - If the given invocation name is badly formatted.
  // - If no field mask was given.
  rpc GetInvocation(GetInvocationRequest) returns (Invocation);

  // Retrieves all targets for a parent invocation.  This might be limited by
  // user or server, in which case a continuation token is provided.
  // The order in which results are returned is undefined, but stable.
  //
  // An error will be reported in the following cases:
  // - If the parent is not found.
  // - If the given parent name is badly formatted.
  // - If no field mask was given.
  rpc ListTargets(ListTargetsRequest) returns (ListTargetsResponse);

  rpc ListTargetSubFiles(ListTargetSubFilesRequest) returns (ListTargetSubFilesResponse);

  // Retrieves the File with the given uri.
  // returns a stream of bytes to be stitched together in order.
  //
  // An error will be reported in the following cases:
  // - If the File is not found.
  // - If the given File uri is badly formatted.
  rpc GetFile(GetFileRequest) returns (stream GetFileResponse);

  rpc DownloadFile(DownloadFileRequest) returns (DownloadFileResponse);

  rpc GetInitialState(GetInitialStateRequest) returns (GetInitialStateResponse);

  rpc GetTestCases(GetTestCasesRequest) returns (GetTestCasesResponse);
}

// Request passed into SearchInvocations
message SearchInvocationsRequest {
  // The maximum number of items to return. Zero means all, but may be capped by
  // the server.
  int32 page_size = 1;

  // Options for pagination.
  oneof page_start {
    // The next_page_token value returned from a previous Search request, if
    // any.
    string page_token = 2;

    // Absolute number of results to skip. May be rejected if too high.
    int64 offset = 3;
  }

  // A filtering query string.
  //
  // Only a limited number of fields and operators are supported. Not every
  // field supports every operator.
  //
  // Fields that support equals ("=") restrictions:
  //
  // name
  // status_attributes.status
  // workspace_info.hostname
  //
  // Fields that support contains (":") restrictions:
  //
  // invocation_attributes.users
  // invocation_attributes.labels
  //
  // Fields that support comparison ("<", "<=", ">", ">=") restrictions;
  //
  // timing.start_time
  //
  // Supported custom function global restrictions:
  //
  // propertyEquals("key", "value")
  string query = 4;

  // The project id to search under.
  string project_id = 5;

  // If true, all equals or contains restrictions on string fields in query will
  // require exact match. Otherwise, a string field restriction may ignore case
  // and punctuation.
  bool exact_match = 7;

  string tool = 8;
}

// Response from calling SearchInvocations
message SearchInvocationsResponse {
  // Invocations matching the search, possibly capped at request.page_size or a
  // server limit.
  repeated Invocation invocations = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results.
  string next_page_token = 2;

  repeated string tools_list = 3;
}

// Request passed into GetInvocation
message GetInvocationRequest {
  // The name of the invocation to retrieve. It must match this format:
  // invocations/${INVOCATION_ID}
  // where INVOCATION_ID must be an RFC 4122-compliant random UUID.
  string name = 1;
}

// Request passed into ListTargets
message ListTargetsRequest {
  // The invocation name of the targets to retrieve. It must match this format:
  // invocations/${INVOCATION_ID}
  string parent = 1;

  // The maximum number of items to return.
  // Zero means all, but may be capped by the server.
  int32 page_size = 2;

  // Options for pagination.
  oneof page_start {
    // The next_page_token value returned from a previous List request, if any.
    string page_token = 3;

    // Absolute number of results to skip.
    int64 offset = 4;
  }

  // A filter to return only resources that match it.
  // Any fields used in the filter must be also specified in the field mask.
  // May cause pages with 0 results and a next_page_token to be returned.
  string filter = 5;
}

// Response from calling ListTargetsResponse
message ListTargetsResponse {
  // Targets matching the request invocation,
  // possibly capped at request.page_size or a server limit.
  repeated Target targets = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message ListTargetSubFilesRequest {
  string parent = 1;
}

message ListTargetSubFilesResponse {
  repeated File files = 1;
}

// Request object for GetFile
message GetFileRequest {
  // This corresponds to the uri field in the File message.
  string uri = 1;

  // The offset for the first byte to return in the read, relative to the start
  // of the resource.
  //
  // A `read_offset` that is negative or greater than the size of the resource
  // will cause an `OUT_OF_RANGE` error.
  int64 read_offset = 2;

  // The maximum number of `data` bytes the server is allowed to return in the
  // sum of all `ReadResponse` messages. A `read_limit` of zero indicates that
  // there is no limit, and a negative `read_limit` will cause an error.
  //
  // If the stream returns fewer bytes than allowed by the `read_limit` and no
  // error occurred, the stream includes all data from the `read_offset` to the
  // end of the resource.
  int64 read_limit = 3;

  // Only applies if the referenced file is a known archive type (ar, jar, zip)
  // The above read_offset and read_limit fields are applied to this entry.
  // If this file is not an archive, INVALID_ARGUMENT is thrown.
  string archive_entry = 4;
}

// Response object for GetFile
message GetFileResponse {
  // The file data.
  bytes data = 1;
}

message GetInitialStateRequest {}

message GetInitialStateResponse { repeated string tools_list = 1; }

message DownloadFileRequest {
  string file_name = 1;
}

message DownloadFileResponse {
  string file_data = 1;
}

message TestSuiteFilter {
  string test_suite_name = 1;
  string tool_tag = 2;
}

message GetTestCasesRequest {
  int32 page_size = 1;
  repeated Invocation invocations = 2;
  string page_token = 3;
  string query = 4;
  string project_id = 5;
  string tool = 6;
}

message GetTestCasesResponse {
  repeated InvocationTest invocation_tests = 2;
}

